import json
import sys
import os
import re
import shutil
import random
from natsort import natsorted
from datetime import datetime, timedelta, timezone, time as dtime
from time import sleep, time
import threading
import traceback
import winreg
from moviepy.video.fx import Resize as resize, Crop as crop, MirrorX as mirror_x, MultiplySpeed, CrossFadeIn
from moviepy import VideoFileClip, AudioFileClip, concatenate_videoclips, afx, vfx, CompositeVideoClip, ImageClip, ColorClip
from moviepy.audio.AudioClip import CompositeAudioClip
import requests
from unidecode import unidecode
import yt_dlp
import portalocker
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium_stealth import stealth
import subprocess
import pickle
import uuid
import wmi
import platform
from tkinter import messagebox, filedialog
import customtkinter as ctk
import ctypes
from PIL import Image, ImageDraw
import pystray
from pystray import MenuItem as item
import keyboard
import pyperclip
import tempfile
import queue
from pathlib import Path
from selenium.webdriver.firefox.service import Service as ff_Service
from selenium.webdriver.firefox.options import Options
import zipfile
from imageio import imwrite
import cv2
import numpy as np

serials = {
    '0025_38B2_21C3_22BE.YX04C6LZ':"2025-04-08", #thai
    "0026_B768_407B_68E5.BSS-0123456789":"2025-03-25", #ban thai 1
    "0000_0000_0000_0001_00A0_7519_257D_4E36.L415NRCV003LRHMB":"2025-03-25", #ban thai 2
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28",
    "0000_0000_0000_0000_0026_B738_363E_5915./2XW1YR3/CNCMC0028S04C2/":"2026-01-01",
    "0025_38D2_1104_730B.WZ14MC006S":"2030-01-01",
    "50026B7782A933E5Default string":"2024-12-31",
    "MSQ2341256207069":"2025-01-10",
    "S0TYNEAD201037/8LK3382/CN129634APGGA0/":"2024-12-31",
    "AA000000056000001229/G6NFFS1/CN129611CT0352/":"2025-01-10",
    '9D11026003520Default string':"2025-01-06",
    '0025_38BA_31B0_4376.PTKQT1BNNK5D3K':"2025-01-10",
    'DSMB20A2205734/HZSBQC2/CN1296368R0037/':"2025-01-09",
    'AA000000000000003668CB17891576':"2025-01-10",
    'LDK778R002629/FJCKZ52/CN1296358M000A/':"2025-01-16",
    'SN11R03W18-1I93B23KBJG2916589467376324':"2025-01-29",
    "AA000000000000006941Default string":"2025-01-28",
    "51A907031FEB00027947/7NJBQ72/CN1296364E00F2/":"2025-02-09",
    "gggg":"2025-01-28",
    "gggg":"2025-01-28"
}

already_serial = [
    '50026B7782A933E5Default string',
    'MSQ2341256207069',
    'S0TYNEAD201037/8LK3382/CN129634APGGA0/',
    'AA000000056000001229/G6NFFS1/CN129611CT0352/',
    '9D11026003520Default string',
    '0025_38BA_31B0_4376.PTKQT1BNNK5D3K',
    'DSMB20A2205734/HZSBQC2/CN1296368R0037/',
    'AA000000000000003668CB17891576',
    'LDK778R002629/FJCKZ52/CN1296358M000A/',
    'SN11R03W18-1I93B23KBJG2916589467376324',
    '0025_38B2_21C3_22BE.YX04C6LZ',
    'AA000000000000006941Default string',
    '51A907031FEB00027947/7NJBQ72/CN1296364E00F2/',
    'gggg',
    'gggg',
    'gggg'
]

ban_serials = []

def get_disk_and_mainboard_serial():
    c = wmi.WMI()
    disk_id = None
    for disk in c.Win32_DiskDrive():
        for partition in disk.associators("Win32_DiskDriveToDiskPartition"):
            for logical_disk in partition.associators("Win32_LogicalDiskToPartition"):
                if logical_disk.DeviceID.lower() == "c:":
                    disk_id = disk.SerialNumber
                    break
            if disk_id:
                break
        if disk_id:
            break
    mainboard_id = None
    for board in c.Win32_BaseBoard():
        mainboard_id = board.SerialNumber
        break
    if disk_id and mainboard_id:
        return f"{disk_id}{mainboard_id}"
    return "Kh√¥ng t√¨m th·∫•y m√£ m√°y"

is_dev_enviroment = True
def get_current_dir():
    """L·∫•y th∆∞ m·ª•c ƒëang ch·∫°y t·ªáp th·ª±c thi"""
    if getattr(sys, 'frozen', False):
        current_dir = os.path.dirname(sys.executable)
        is_dev_enviroment = False
    else:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        is_dev_enviroment = True
    return current_dir


def get_chrome_profile_folder():
    if platform.system() == "Windows":
        profile_folder = os.path.join(os.environ['LOCALAPPDATA'], "Google", "Chrome", "User Data")
    elif platform.system() == "Darwin":
        profile_folder = os.path.join(os.path.expanduser("~"), "Library", "Application Support", "Google", "Chrome")
    elif platform.system() == "Linux":
        profile_folder = os.path.join(os.path.expanduser("~"), ".config", "google-chrome")
    else:
        raise Exception("H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
    return profile_folder

current_dir = get_current_dir()
sys.path.append(current_dir)
secret_path = os.path.join(current_dir, 'oauth', 'secret.json')
chromedriver_path = os.path.join(current_dir, 'import\\chromedriver.exe')
geckodriver_path = os.path.join(current_dir, 'import\\geckodriver.exe')
firefox_binary_path = "C:\\Program Files\\Mozilla Firefox\\firefox.exe"
config_path = os.path.join(current_dir, 'config.pkl')
download_info_path = os.path.join(current_dir, 'download_info.pkl')
icon_path = os.path.join(current_dir, 'import' , 'icon.png')
ico_path = os.path.join(current_dir, 'import' , 'icon.ico')
profile_folder = get_chrome_profile_folder()
low_config_path = os.path.join(current_dir, '1.txt')
padx = 5
pady = 2
default_percent = 1
height_element = 40

tiktok_config_folder = os.path.join(current_dir, 'tiktok_config')
os.makedirs(tiktok_config_folder, exist_ok=True)
tiktok_config_commond_path = os.path.join(current_dir, 'tiktok_config', 'tiktok_config_commond.pkl')

youtube_config_folder = os.path.join(current_dir, 'youtube_config')
os.makedirs(youtube_config_folder, exist_ok=True)
youtube_config_commond_path = os.path.join(current_dir, 'youtube_config', 'youtube_config_commond.pkl')

facebook_config_folder = os.path.join(current_dir, 'facebook_config')
os.makedirs(facebook_config_folder, exist_ok=True)
facebook_config_commond_path = os.path.join(current_dir, 'facebook_config', 'facebook_config_commond.pkl')




if os.path.exists(low_config_path):
    height_element = 30
    default_percent = 0.78
    pady = 1
    
width_window = 500
user32 = ctypes.windll.user32
screen_width = user32.GetSystemMetrics(0)
screen_height = user32.GetSystemMetrics(1)
left = 0.3
right = 0.7
LEFT = 'left'
RIGHT = 'right'
CENTER = 'center'
watch_percent = 1
like_percent = 0.7
comment_percent = 0.7
follow_percent = 0.7
tot = "üü¢"
thanhcong = "‚úÖ"
comment_icon = "üí¨"
like_icon = "‚ù§Ô∏è"
thatbai = "‚ùå"
canhbao = "‚ö†Ô∏è"
trang_chu_tiktok = "https://www.tiktok.com"
upload_tiktok_url = "https://www.tiktok.com/tiktokstudio/upload"

def load_ffmpeg():
    def get_ffmpeg_dir():
        if getattr(sys, 'frozen', False):
            base_dir = os.path.dirname(sys.executable)
        else:
            base_dir = os.path.dirname(__file__)
        ffmpeg_dir = os.path.join(base_dir, "ffmpeg", "bin")
        return ffmpeg_dir

    def is_ffmpeg_available():
        try:
            result = subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            return "ffmpeg version" in result.stdout.lower()  # Ki·ªÉm tra c√≥ ch·ªØ "ffmpeg version" kh√¥ng
        except FileNotFoundError:
            return False

    ffmpeg_dir = get_ffmpeg_dir()
    
    if not is_ffmpeg_available():
        os.environ["PATH"] = ffmpeg_dir + os.pathsep + os.environ["PATH"]
        os.environ["FFMPEG_BINARY"] = os.path.join(ffmpeg_dir, "ffmpeg.exe")  # ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng FFMPEG_BINARY

        # Ki·ªÉm tra l·∫°i sau khi th√™m PATH
        if not is_ffmpeg_available():
            raise RuntimeError(f"Kh√¥ng t√¨m th·∫•y FFmpeg t·∫°i {ffmpeg_dir}. Ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n!")
load_ffmpeg()


def add_firefox_to_path():
    try:
        # Ki·ªÉm tra Firefox ƒë√£ c√≥ trong PATH ch∆∞a
        result = subprocess.run(["where", "firefox"], capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            return

        print("‚ö†Ô∏è Firefox ch∆∞a c√≥ trong PATH. ƒêang t√¨m th∆∞ m·ª•c Firefox...")

        # Danh s√°ch c√°c th∆∞ m·ª•c c√≥ th·ªÉ ch·ª©a Firefox
        possible_paths = [
            r"C:\Program Files\Mozilla Firefox",
            r"C:\Program Files (x86)\Mozilla Firefox"
        ]

        firefox_path = None
        for path in possible_paths:
            if os.path.exists(os.path.join(path, "firefox.exe")):
                firefox_path = path
                break
        
        if not firefox_path:
            print("‚ùå Kh√¥ng t√¨m th·∫•y Firefox tr√™n m√°y.")
            return
        
        print(f"üîç T√¨m th·∫•y Firefox t·∫°i: {firefox_path}")

        # Th√™m v√†o PATH t·∫°m th·ªùi
        os.environ["PATH"] += os.pathsep + firefox_path

        # Th√™m v√†o PATH vƒ©nh vi·ªÖn trong Registry
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SYSTEM\CurrentControlSet\Control\Session Manager\Environment", 0, winreg.KEY_ALL_ACCESS)
        path_value, _ = winreg.QueryValueEx(key, "Path")
        
        if firefox_path not in path_value:
            new_path = path_value + os.pathsep + firefox_path
            winreg.SetValueEx(key, "Path", 0, winreg.REG_EXPAND_SZ, new_path)
            print("‚úÖ ƒê√£ th√™m Firefox v√†o PATH vƒ©nh vi·ªÖn. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i terminal ƒë·ªÉ √°p d·ª•ng.")

        winreg.CloseKey(key)

    except Exception as e:
        print("‚ùå L·ªói khi th√™m Firefox v√†o PATH:", e)
# G·ªçi h√†m
add_firefox_to_path()


def load_download_info():
    download_info = {
         "downloaded_urls": []
      }
    if os.path.exists(download_info_path):
        download_if = get_json_data(download_info_path)
    else:
        download_if = download_info
    save_to_json_file(download_if, download_info_path)
    return download_if

def save_download_info(data):
    save_to_json_file(data, download_info_path)




# def get_firefox_driver_with_profile(target_email=None, show=True, proxy=None):
#     """M·ªü Firefox v·ªõi profile c·ª• th·ªÉ ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i"""
    
#     def get_firefox_profile_folder():
#         """X√°c ƒë·ªãnh th∆∞ m·ª•c profile c·ªßa Firefox theo h·ªá ƒëi·ªÅu h√†nh"""
#         if platform.system() == "Windows":
#             return os.path.join(os.environ['APPDATA'], "Mozilla", "Firefox", "Profiles")
#         else:
#             raise Exception("H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
    
#     def get_profile_name_by_gmail():
#         """T√¨m profile theo email ƒëƒÉng nh·∫≠p ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥"""
#         if not target_email:
#             return None
#         profiles = [name for name in os.listdir(firefox_profile_folder) if os.path.isdir(os.path.join(firefox_profile_folder, name))]
#         for profile in profiles:
#             if target_email in profile:
#                 return profile
#         print(f'{canhbao}  Kh√¥ng t√¨m th·∫•y profile cho email {target_email}. ƒêang t·∫°o m·ªõi...')
        
#         subprocess.run(["firefox", "-CreateProfile", f"{target_email}"], check=True)
#         sleep(5)
#         profiles = [name for name in os.listdir(firefox_profile_folder) if os.path.isdir(os.path.join(firefox_profile_folder, name))]
#         for profile in profiles:
#             if target_email in profile:
#                 print(f'‚úÖ ƒê√£ t·∫°o profile: {profile}')
#                 return profile
#         return None
    

#     try:
#         firefox_profile_folder = get_firefox_profile_folder()
#         profile_name = get_profile_name_by_gmail()
#         if not profile_name:
#             return None
        
#         profile_path = os.path.join(firefox_profile_folder, profile_name)

#         if not os.path.exists(profile_path):
#             print(f"‚ùå Kh√¥ng t√¨m th·∫•y profile t·∫°i: {profile_path}")
#             return None
        
#         options = Options()
#         options.add_argument(f"--profile")
#         options.add_argument(profile_path)
#         options.add_argument("--no-remote")
#         options.add_argument("--disable-dev-shm-usage")  # B·ªè qua startup delay

#         if not show:
#             options.add_argument("--headless")  

#         # ‚ö° Ch·ªëng ph√°t hi·ªán bot tr√™n Firefox
#         options.set_preference("dom.webdriver.enabled", False)
#         options.set_preference("useAutomationExtension", False)
#         options.set_preference("general.useragent.override", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/110.0")
#         options.set_preference("media.peerconnection.enabled", False)
#         options.set_preference("privacy.resistFingerprinting", True)
#         options.set_preference("network.http.referer.spoofSource", True)

#         service = Service(geckodriver_path)  # ƒê·∫∑t ƒë∆∞·ªùng d·∫´n th√≠ch h·ª£p cho geckodriver
#         driver = webdriver.Firefox(service=service, options=options)

#         print(f"‚úÖ {target_email} ƒê√£ m·ªü Firefox v·ªõi profile: {profile_path}")
        
#         return driver
#     except Exception as e:
#         print(f"üö® L·ªói: {e}")
#         return None




def get_firefox_driver_with_profile(target_email=None, show=True, proxy=None, email=None, password=None):
    """M·ªü Firefox v·ªõi profile c·ª• th·ªÉ"""
    
    def get_firefox_profile_folder():
        """X√°c ƒë·ªãnh th∆∞ m·ª•c profile c·ªßa Firefox theo h·ªá ƒëi·ªÅu h√†nh"""
        if platform.system() == "Windows":
            return os.path.join(os.environ['APPDATA'], "Mozilla", "Firefox", "Profiles")
        else:
            raise Exception("H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")

    def get_profile_name_by_gmail():
        """T√¨m profile theo email ƒëƒÉng nh·∫≠p ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥"""
        if not target_email:
            return None, False
        profiles = [name for name in os.listdir(firefox_profile_folder) if os.path.isdir(os.path.join(firefox_profile_folder, name))]
        for profile in profiles:
            if f".{target_email}.default" in profile:
                print(profile)
                return profile, False
        print(f'{canhbao}  Kh√¥ng t√¨m th·∫•y profile cho email {target_email}. ƒêang t·∫°o m·ªõi...')
        
        subprocess.run(["firefox", "-CreateProfile", f"{target_email}.default"], check=True)
        sleep(5)
        subprocess.run(["firefox", "-P", f"{target_email}.default"], check=True)
        proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = get_proxy_info(proxy)
        if proxy_ip and proxy_port:
            print(f'H√£y thi·∫øt l·∫≠p proxy v√† login t√†i kho·∫£n tr∆∞·ªõc khi d√πng ·ª©ng d·ª•ng. C√°c b∆∞·ªõc th·ª±c hi·ªán:')
            print(f"-M·ªü ƒë∆∞·ªùng d·∫´n: about:preferences")
            print(f"-T√¨m proxy v√† m·ªü l√™n.")
            print(f"-Ch·ªçn Manual proxy configuration")
            print(f"-Nh·∫≠p proxy IP: {proxy_ip}")
            print(f"-Nh·∫≠p proxy port: {proxy_port}")
            print("L∆∞u l·∫°i v√† truy c·∫≠p trang web.")
            if proxy_user and proxy_pass:
                print(f"Nh·∫≠p user: {proxy_user}")
                print(f"Nh·∫≠p pass: {proxy_pass}")
                print("L∆∞u l·∫°i (N·∫øu kh√¥ng hi·ªán c·ª≠a s·ªï l∆∞u th√¨ v√†o setting --> v√†o <Privacy & Security> --> b·∫≠t <Ask to save passwords>)")
            print("L∆∞u l·∫°i v√† truy c·∫≠p trang web --> Nh·∫≠p user v√† pass proxy n·∫øu c√≥ --> l∆∞u user v√† pass")
        print(f'--> Login t√†i kho·∫£n tiktok/yuoutube/facebook v√†o profile.')
        if email and password:
            print(f'email: {email}')
            print(f'password: {password}')
        return None, False

    try:
        target_email = target_email.replace(' ', '')
        firefox_profile_folder = get_firefox_profile_folder()
        profile_name, is_create = get_profile_name_by_gmail()
        if not profile_name:
            return None
        profile_path = os.path.join(firefox_profile_folder, profile_name)
        if not os.path.exists(profile_path):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y profile t·∫°i: {profile_path}")
            return None
        
        options = Options()
        options.add_argument(f"--profile")
        options.add_argument(profile_path)
        options.add_argument("--no-remote")
        options.add_argument("--disable-dev-shm-usage")
        options.set_preference("signon.rememberSignons", True)
   
        if not show:
            options.add_argument("--headless")  
        # ‚ö° Ch·ªëng ph√°t hi·ªán bot tr√™n Firefox
        options.set_preference("dom.webdriver.enabled", False)  # ·∫®n WebDriver
        options.set_preference("useAutomationExtension", False)
        # options.set_preference("media.peerconnection.enabled", False)  # Ch·∫∑n WebRTC (ngƒÉn d√≤ IP)
        # options.set_preference("network.http.referer.spoofSource", True)  # Ch·ªëng theo d√µi referrer

        service = Service(geckodriver_path)
        driver = webdriver.Firefox(service=service, options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.execute_script("""
        const getContext = HTMLCanvasElement.prototype.getContext;
        HTMLCanvasElement.prototype.getContext = function(type, attribs) {
            if (type === '2d') {
                attribs = Object.assign({}, attribs, {willReadFrequently: true});
            }
            return getContext.apply(this, arguments);
        };
        """)
        print(f"‚úÖ {target_email} ƒê√£ m·ªü Firefox v·ªõi profile: {profile_path}")
        return driver
    except Exception as e:
        getlog()
        return None


def get_chrome_driver_with_profile(target_email=None, show=True, proxy=None, is_remove_proxy=False):
    try:
        # T·∫Øt Chrome ƒëang ch·∫°y (kh√¥ng ·∫£nh h∆∞·ªüng t·ªõi session kh√°c)
        try:
            subprocess.run(["taskkill", "/F", "/IM", "chrome.exe", "/T"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            pass
        sleep(1)
        def get_profile_name_by_gmail(target_email=None):
            if not target_email:
                target_email = "Default"

            def check_gmail_in_profile(profile_path):
                preferences_file = os.path.join(profile_path, "Preferences")
                if os.path.exists(preferences_file):
                    try:
                        with open(preferences_file, 'r', encoding='utf-8') as f:
                            preferences = json.load(f)
                            if 'account_info' in preferences:
                                for account in preferences['account_info']:
                                    if 'email' in account and account['email'] == target_email:
                                        return preferences_file
                    except:
                        getlog()
                        print(f"{canhbao} Kh√¥ng th·ªÉ ƒë·ªçc Preferences trong {profile_path}: {e}")
                return None

            profiles = [name for name in os.listdir(profile_folder) if os.path.isdir(os.path.join(profile_folder, name)) and name.startswith("Profile")]
            if "Default" in os.listdir(profile_folder):
                profiles.append("Default")

            for profile_name in profiles:
                profile_path = os.path.join(profile_folder, profile_name)
                preferences_file = check_gmail_in_profile(profile_path)
                if preferences_file:
                    return profile_name, preferences_file
            print(f"{thatbai} Kh√¥ng t√¨m th·∫•y profile cho email {target_email}")
            return None, None

        profile_name, preferences_file = get_profile_name_by_gmail(target_email)
        if profile_name and preferences_file:
            options = webdriver.ChromeOptions()
            options.add_argument(f"user-data-dir={profile_folder}")
            options.add_argument(f"profile-directory={profile_name}")

            # C·∫•u h√¨nh Proxy
            proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = get_proxy_info(proxy)
            if proxy_ip and proxy_port:
                if is_remove_proxy:
                    options.add_argument('--no-proxy-server')
                    options.add_argument('--proxy-server="direct://"')
                    options.add_argument('--proxy-bypass-list=*')
                    with open(preferences_file, "r", encoding="utf-8") as f:
                        preferences = json.load(f)
                    if "proxy" in preferences:
                        del preferences["proxy"]
                    with open(preferences_file, "w", encoding="utf-8") as f:
                        json.dump(preferences, f, indent=4)
                    print("‚úÖ ƒê√£ x√≥a c·∫•u h√¨nh proxy trong Preferences.")
                    chrome_proxy_profile_folder = os.path.join(os.getcwd(), "chrome_proxy_profile")
                    if os.path.exists(chrome_proxy_profile_folder):
                        unpacked_folder = os.path.join(chrome_proxy_profile_folder, f"{proxy_ip}_{proxy_port}_unpacked")
                        shutil.rmtree(unpacked_folder, ignore_errors=True)
                        print("‚úÖ ƒê√£ x√≥a extension proxy.")
                else:
                    if proxy_user and proxy_pass:
                        proxy_extension_path = create_proxy_extension_with_chrome_profile(proxy_ip, proxy_port, proxy_user, proxy_pass)
                        options.add_argument(f"--disable-extensions-except={proxy_extension_path}")
                        options.add_argument(f"--load-extension={proxy_extension_path}")
                    else:
                        options.add_argument(f'--proxy-server=http://{proxy_ip}:{proxy_port}')

            # T·ªëi ∆∞u Chrome ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán l√† bot
            if not show:
                options.add_argument("--headless")
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument("--log-level=3")
            options.add_argument("--disable-logging")
            options.add_experimental_option('excludeSwitches', ['enable-automation'])
            options.add_experimental_option('useAutomationExtension', False)

            # M·ªü tr√¨nh duy·ªát Chrome
            driver = webdriver.Chrome(options=options)
            driver.set_window_size(screen_width - 100, screen_height - 50)

            # Ki·ªÉm tra IP sau khi m·ªü tr√¨nh duy·ªát
            sleep_random(3,6)
            browser_ip = get_browser_ip(driver)
            if not browser_ip or (proxy_ip and proxy_ip != browser_ip):
                if target_email:
                    print(f"‚ùå {target_email} ƒê·ªïi IP kh√¥ng th√†nh c√¥ng!")
                driver.quit()
                return None
            else:
                print(f"{tot} {target_email} IP ƒëang d√πng: {browser_ip}")

            print(f"‚úÖ ƒê√£ m·ªü Chrome v·ªõi profile: {profile_name}")
            return driver
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y Chrome profile cho t√†i kho·∫£n: {target_email}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o tr√¨nh duy·ªát: {e}")
        return None


def get_driver(show=True, proxy=None, mode="web", target_email=None):
    try:
        service = Service(chromedriver_path)
        options = webdriver.ChromeOptions()

        # Random h√≥a User-Agent ƒë·ªÉ tr√°nh b·ªã Google theo d√µi
        proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = get_proxy_info(proxy)
        if not proxy_country or proxy_country not in USER_AGENTS_WINDOWS:
            proxy_country = "Other"
        if mode == "web":
            user_agent = USER_AGENTS_WINDOWS[proxy_country]
        else:
            user_agent = "Mozilla/5.0 (Linux; Android 11; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Mobile Safari/537.36"

        
        options.add_argument(f"--user-agent={user_agent}")

        if proxy_ip and proxy_port:
            if proxy_user and proxy_pass:
                pluginfile = create_chrome_proxy_extension(proxy_ip, proxy_port, proxy_user, proxy_pass)
                options.add_extension(pluginfile)
                # proxy_extension_path = create_proxy_extension_with_chrome_profile(proxy_ip, proxy_port, proxy_user, proxy_pass)
                # options.add_argument(f"--load-extension={proxy_extension_path}")
            else:
                proxy_url = f"http://{proxy_ip}:{proxy_port}"
                options.add_argument(f'--proxy-server={proxy_url}')

        # Ch·∫°y ·ªü ch·∫ø ƒë·ªô headless n·∫øu c·∫ßn
        if not show:
            options.add_argument('--headless=new')
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--force-device-scale-factor=1")
        # T·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument("--log-level=3")
        options.add_argument("--disable-logging")
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument("--disable-popup-blocking")
        options.add_argument("--disable-features=WebRTC")
        if mode == "mobi":
            mobile_emulation = {
                # "deviceMetrics": {"width": 360, "height": 740, "pixelRatio": 3.0},
                "userAgent": user_agent
            }
            options.add_experimental_option("mobileEmulation", mobile_emulation)
        # debugging_port = random.randint(9000, 9999) 
        # options.add_argument(f"--remote-debugging-port={debugging_port}")
        driver = webdriver.Chrome(service=service, options=options)
        # if mode == 'web':
        driver.set_window_size(screen_width - 200, screen_height - 50)
        # X√≥a d·∫•u hi·ªáu bot b·∫±ng JavaScript
        driver.execute_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, 'languages', { get: () => ['en-US', 'en'] });
            Object.defineProperty(navigator, 'hardwareConcurrency', { get: () => 4 });
        """)

        # Fake WebGL + Canvas (tr√°nh b·ªã nh·∫≠n di·ªán qua fingerprint)
        driver.execute_script("""
            WebGLRenderingContext.prototype.getParameter = function(parameter) {
                if (parameter === 37445) return 'Intel Open Source Technology Center';
                if (parameter === 37446) return 'Mesa DRI Intel(R) HD Graphics 620';
                return WebGLRenderingContext.prototype.getParameter(parameter);
            };
        """)

        try:
            stealth(driver,
                    languages=["en-US", "en"],
                    vendor="Google Inc.",
                    platform="Win32" if mode == "web" else "Linux",
                    webgl_vendor="Intel Inc.",
                    renderer="Intel Iris OpenGL Engine",
                    fix_hairline=True
                    )
        except ImportError:
            pass

        # Ki·ªÉm tra IP sau khi m·ªü tr√¨nh duy·ªát
        browser_ip = get_browser_ip(driver)
        if not browser_ip or (proxy_ip and proxy_ip != browser_ip):
            if target_email:
                print(f"‚ùå {target_email} ƒê·ªïi IP kh√¥ng th√†nh c√¥ng!")
            driver.quit()
            return None
        else:
            if target_email:
                print(f"{tot} {target_email} IP ƒëang d√πng: {browser_ip}")
        # if mode == 'web':
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[-1])
        if len(driver.window_handles) > 1:
            driver.switch_to.window(driver.window_handles[0])  
            driver.close()
        # Chuy·ªÉn l·∫°i sang tab m·ªõi
        driver.switch_to.window(driver.window_handles[-1])
        sleep_random(1,2)
        return driver
    except Exception as e:
        getlog()
        return None
    
def disable_system_proxy():
    try:
        # Reset proxy trong Windows
        subprocess.run('netsh winhttp reset proxy', shell=True)
        subprocess.run('REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                       '/v ProxyEnable /t REG_DWORD /d 0 /f', shell=True)
        # X√≥a bi·∫øn m√¥i tr∆∞·ªùng HTTP_PROXY & HTTPS_PROXY (n·∫øu c√≥)
        if "HTTP_PROXY" in os.environ:
            del os.environ["HTTP_PROXY"]
        if "HTTPS_PROXY" in os.environ:
            del os.environ["HTTPS_PROXY"]

        print("üö´ Proxy h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t·∫Øt")
    except:
        getlog()

def set_system_proxy(proxy_ip, proxy_port, username=None, password=None):
    try:
        proxy_address = f"{proxy_ip}:{proxy_port}"
        subprocess.run('REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                       '/v ProxyEnable /t REG_DWORD /d 1 /f', shell=True, check=True)
        subprocess.run(f'REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                       f'/v ProxyServer /t REG_SZ /d {proxy_address} /f', shell=True, check=True)
        if username and password:
            proxy_auth = f"{username}:{password}@{proxy_ip}:{proxy_port}"
            auth_proxy = f"http://{proxy_auth}"
            
            subprocess.run(f'REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                           f'/v ProxyUser /t REG_SZ /d {username} /f', shell=True, check=True)
            subprocess.run(f'REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                           f'/v ProxyPass /t REG_SZ /d {password} /f', shell=True, check=True)

        print(f"‚úÖ Proxy h·ªá th·ªëng ƒë√£ ƒë·ªïi th√†nh {proxy_address}")
    except:
        getlog()

def get_proxy_info(proxy=None):
    proxy_ip = proxy_port = proxy_user = proxy_pass = proxy_country = None
    if proxy:
        proxy_info = proxy.split(":")
        if len(proxy_info) == 5:
            proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = proxy_info
        if len(proxy_info) == 4:
            proxy_ip, proxy_port, proxy_user, proxy_pass = proxy_info
        if len(proxy_info) == 3:
            proxy_ip, proxy_port, proxy_country = proxy_info
        elif len(proxy_info) == 2:
            proxy_ip, proxy_port = proxy_info
    return proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country

def get_browser_ip(driver):
    try:
        driver.get("https://checkip.amazonaws.com")
        sleep(random.uniform(2, 5))
        ip = driver.find_element("tag name", "body").text.strip()
        return ip
    except:
        return "Kh√¥ng x√°c ƒë·ªãnh" 

USER_AGENTS_WINDOWS = {
    "United States": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "United Kingdom": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Canada": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Australia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "France": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Germany": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Russia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Japan": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "China": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Vietnam": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "India": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "South Korea": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Brazil": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Mexico": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Italy": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Spain": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Turkey": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Netherlands": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Indonesia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Thailand": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Philippines": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Argentina": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "South Africa": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Pakistan": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Egypt": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Other": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
}

def sleep_random(from_second=1, to_second=5):
    sleep(random.uniform(from_second, to_second))

def get_time_random(from_second=1, to_second=10):
    get_time = random.uniform(from_second, to_second)
    return get_time

def get_random_number_int(from_second=1, to_second=10):
    get_time = random.randint(from_second, to_second)
    return get_time

def input_char_by_char(ele, text):
    for char in text:
        ele.send_keys(char)
        if char == ' ':
            sleep_random(0.1,0.2)
        else:
            sleep_random(0.03,0.8)

def get_element_by_text(driver, text, tag_name='*', timeout=6):
    try:
        # T√¨m element ch·ª©a text thu·ªôc th·∫ª x√°c ƒë·ªãnh
        element = WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, f'//{tag_name}[contains(text(), "{text}")]'))
        )
        return element
    except:
        return None


def create_chrome_proxy_extension(proxy_ip, proxy_port, username, password, extension_name='chrome_proxy'):
    pluginfile_folder = os.path.join(current_dir, extension_name)
    os.makedirs(pluginfile_folder, exist_ok=True)
    pluginfile = os.path.join(pluginfile_folder, f"{proxy_ip}_{proxy_port}.zip")
    if os.path.exists(pluginfile):
        return pluginfile
    
    manifest_json = f"""{{
        "version": "1.0.0",
        "manifest_version": 2,
        "name": "{extension_name}",
        "permissions": [
            "proxy",
            "tabs",
            "unlimitedStorage",
            "storage",
            "<all_urls>",
            "webRequest",
            "webRequestBlocking"
        ],
        "background": {{
            "scripts": ["background.js"]
        }},
        "minimum_chrome_version":"76.0.0"
    }}"""

    background_js = f"""
    var config = {{
        mode: "fixed_servers",
        rules: {{
            singleProxy: {{
                scheme: "http",
                host: "{proxy_ip}",
                port: parseInt({proxy_port})
            }},
            bypassList: []
        }}
    }};
    chrome.proxy.settings.set({{value: config, scope: "regular"}}, function() {{}});

    chrome.webRequest.onAuthRequired.addListener(
        function(details) {{
            return {{
                authCredentials: {{
                    username: "{username}",
                    password: "{password}"
                }}
            }};
        }},
        {{urls: ["<all_urls>"]}},
        ["blocking"]
    );
    """
    
    with zipfile.ZipFile(pluginfile, 'w') as zp:
        zp.writestr("manifest.json", manifest_json)
        zp.writestr("background.js", background_js)

    return pluginfile

def create_proxy_extension_with_chrome_profile(proxy_ip, proxy_port, username=None, password=None):
    chrome_proxy_profile_folder = os.path.join(os.getcwd(), "chrome_proxy")
    os.makedirs(chrome_proxy_profile_folder, exist_ok=True)

    extension_name = f"Proxy_{proxy_ip}_{proxy_port}"
    unpacked_folder = os.path.join(chrome_proxy_profile_folder, extension_name)
    os.makedirs(unpacked_folder, exist_ok=True)

    # ‚úÖ C·∫≠p nh·∫≠t Manifest v3
    manifest_json = {
        "name": extension_name,
        "version": "1.0",
        "manifest_version": 3,
        "permissions": ["proxy", "storage", "webRequest", "webRequestBlocking"],
        "host_permissions": ["<all_urls>"],
        "background": {
            "service_worker": "background.js"
        }
    }

    # ‚úÖ C·∫≠p nh·∫≠t `background.js`
    background_js = f"""
chrome.proxy.settings.set({{
    value: {{
        mode: "fixed_servers",
        rules: {{
            singleProxy: {{
                scheme: "http",
                host: "{proxy_ip}",
                port: {proxy_port}
            }},
            bypassList: []
        }}
    }},
    scope: "regular"
}}, function() {{ console.log("‚úÖ Proxy set to {proxy_ip}:{proxy_port}"); }});

{"chrome.webRequest.onAuthRequired.addListener(" if username and password else "// Kh√¥ng c√≥ username/password"}
    function(details) {{
        return {{
            authCredentials: {{
                username: "{username}",
                password: "{password}"
            }}
        }};
    }},
    {{ urls: ["<all_urls>"] }},
    ["blocking"]
{"});" if username and password else ""}
"""

    # L∆∞u file manifest.json
    with open(os.path.join(unpacked_folder, "manifest.json"), "w", encoding="utf-8") as f:
        json.dump(manifest_json, f, indent=4)

    # L∆∞u file background.js
    with open(os.path.join(unpacked_folder, "background.js"), "w", encoding="utf-8") as f:
        f.write(background_js)

    return unpacked_folder



def get_element_by_xpath(driver, xpath, key=None, index=0, multiple_ele=False, timeout=10):
    try:
        if multiple_ele:
            WebDriverWait(driver, timeout).until(
                EC.presence_of_all_elements_located((By.XPATH, xpath))
            )
            return driver.find_elements(By.XPATH, xpath)

        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        elements = driver.find_elements(By.XPATH, xpath)
        if key:
            key = key.lower()
            for ele in elements:
                if key in ele.accessible_name.lower() or key in ele.text.lower() or key in ele.tag_name.lower() or key in ele.aria_role.lower():
                    return ele
            return None
        if len(elements) > 0:
            return elements[index] 
    except:
        return None

def get_xpath(maintag, class_name=None, attribute=None, attribute_value=None, contain=False):
    if contain:
        conditions = []
        if class_name:
            class_list = class_name.split()
            conditions.append(" and ".join([f"contains(@class, '{cls}')" for cls in class_list]))
        if attribute and attribute_value:
            conditions.append(f"contains(@{attribute}, '{attribute_value}')")
        
        if conditions:
            xpath = f"//{maintag}[{' and '.join(conditions)}]"
        else:
            xpath = f"//{maintag}"
    else:
        conditions = []
        if class_name:
            conditions.append(f"@class='{class_name}'")
        if attribute and attribute_value:
            conditions.append(f"@{attribute}='{attribute_value}'")
        
        if conditions:
            xpath = f"//{maintag}[{' and '.join(conditions)}]"
        else:
            xpath = f"//{maintag}"

    return xpath

def get_xpath_by_multi_attribute(maintag, attributes): #attributes = ['name="postSchedule"', ...]
    if len(attributes) > 1:
        attribute = " and @".join(attributes)
    else:
        attribute = attributes[0]
    attribute = f"@{attribute}"
    xpath = f"//{maintag}[{attribute}]"
    return xpath

def find_parent_element(element, level=1, tag_name=None, attribute=None, value=None):
    xpath = f"./ancestor::*[{level}]"
    if tag_name:
        xpath = f"./ancestor::{tag_name}[{level}]"
    if attribute and value:
        xpath += f"[contains(@{attribute}, '{value}')]"
    try:
        parent_element = get_element_by_xpath(element, xpath)
        return parent_element
    except:
        getlog()
        return None 
    
def find_child_element(element, level=1, tag_name=None, attribute=None, value=None):
    xpath = f"./descendant::*[{level}]"
    if tag_name:
        xpath = f"./descendant::{tag_name}[{level}]"
    if attribute and value:
        xpath += f"[contains(@{attribute}, '{value}')]"
    try:
        child_element = get_element_by_xpath(element, xpath)
        return child_element
    except:
        getlog()
        return None

def is_date_greater_than_current_day(date_str, day_delta=0):
    try:
        input_date = datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        print(f"ƒê·ªãnh d·∫°ng ng√†y {date_str} kh√¥ng h·ª£p l·ªá ...")
        return False
    current_date = datetime.now().date()
    target_date = current_date + timedelta(days=day_delta)
    return input_date > target_date
       
def convert_date_format_yyyymmdd_to_mmddyyyy(date_str, vi_date=False):
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        if vi_date:
            formatted_date = date_obj.strftime("%d/%m/%Y")
        else:
            formatted_date = date_obj.strftime("%m/%d/%Y")
        return formatted_date
    except:
        print(f"ƒê·ªãnh d·∫°ng ng√†y {date_str} kh√¥ng ƒë√∫ng yy-mm-dd")

def is_format_date_yyyymmdd(date_str, daydelta=None):
    date_pattern = re.compile(r"^\d{4}-\d{2}-\d{2}$")
    if not date_pattern.match(date_str):
        return False, "ƒê·ªãnh d·∫°ng ng√†y ph·∫£i l√† yyyy-mm-dd"
    if daydelta:
        try:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            return False, "ƒê·ªãnh d·∫°ng ng√†y ph·∫£i l√† yyyy-mm-dd"
        current_date = datetime.now()
        if date_obj > current_date + timedelta(days=daydelta-1):
            return False, f"Date is more than {daydelta} days in the future"
    return True, "Valid date"

def get_pushlish_time_hh_mm(publish_time="", facebook_time=False):
    try:
        hh, mm = map(int, publish_time.split(':'))
        if hh >= 0 and hh < 24 and mm >= 0 and mm < 60:
            if mm >= 45:
                mm = 45
            elif mm >= 30:
                mm = 30
            elif mm >= 15:
                mm = 15
            else:
                mm = 0
            if facebook_time:
                if hh > 12:
                    hh = hh - 12
                    get_time = f"{hh}:{mm}:PM"
                else:
                    get_time = f"{hh}:{mm}:AM"
            else:
                get_time = f"{hh}:{mm}"
            return get_time
        else:
            print("ƒê·ªãnh d·∫°ng gi·ªù ph·∫£i l√† hh:mm (v√≠ d·ª•: 08:30,20:00)")
    except:
        print("ƒê·ªãnh d·∫°ng gi·ªù ph·∫£i l√† hh:mm (v√≠ d·ª•: 08:30,20:00)")
    return None

def convert_datetime_to_string(date):
    try:
        return date.strftime('%Y-%m-%d')
    except ValueError:
        print(f"ng√†y {date} kh√¥ng h·ª£p l·ªá")
        return None
    
def convert_date_string_to_datetime(date_str):
    if not date_str:
        print("Ng√†y ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.")
        return None
    date_str = date_str.strip()
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').date()
    except:
        print(f"ƒê·ªãnh d·∫°ng ng√†y {date_str} ph·∫£i l√† yyyy-mm-dd")
        return None
    
def add_date_into_string(date_str, day_gap):
    date  = convert_date_string_to_datetime(date_str)
    if date:
        date += timedelta(days=day_gap)
        return date.strftime("%Y-%m-%d")
    return None

def convert_time_to_seconds(time_str):
    try:
        list_time = time_str.split(':')
        cnt = len(list_time)
        if cnt == 3:
            return float(list_time[0]) * 3600 + float(list_time[1]) * 60 + float(list_time[2])
        elif cnt == 2:
            return float(list_time[0]) * 60 + float(list_time[1])
        elif cnt == 1:
            return float(list_time[0])
        else:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá")
            return None
    except:
        print("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá")
        return None
 
def get_file_path(file_name=None):
    """L·∫•y ƒë∆∞·ªùng d·∫´n t·ªõi t·ªáp config trong c√πng th∆∞ m·ª•c v·ªõi file th·ª±c thi (exe)"""
    if getattr(sys, "frozen", False):
        application_path = os.path.dirname(sys.executable)
    else:
        application_path = os.path.dirname(os.path.abspath(__file__))
    file_parent_path = application_path
    os.makedirs(file_parent_path, exist_ok=True)
    if file_name:
        return os.path.join(file_parent_path, file_name)
    else:
        return file_parent_path

def set_autostart():
    try:
        # L·∫•y ƒë∆∞·ªùng d·∫´n t·ªõi file app.py
        script_path = os.path.abspath(sys.argv[0])
        key = winreg.HKEY_CURRENT_USER
        key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        key_path = "VocabularyReminder"
        with winreg.OpenKey(
            key, key_value, 0, winreg.KEY_SET_VALUE
        ) as registry_key:
            winreg.SetValueEx(registry_key, key_path, 0, winreg.REG_SZ, script_path)
    except Exception as e:
        print(f"Could not set autostart: {e}")
# H√†m ƒë·ªÉ x√≥a ·ª©ng d·ª•ng kh·ªèi danh s√°ch kh·ªüi ƒë·ªông c√πng Windows
def unset_autostart():
    try:
        key = winreg.HKEY_CURRENT_USER
        key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        key_path = "VocabularyReminder"
        with winreg.OpenKey(
            key, key_value, 0, winreg.KEY_SET_VALUE
        ) as registry_key:
            winreg.DeleteValue(registry_key, key_path)
    except FileNotFoundError:
        pass
    except Exception as e:
        print(f"Could not unset autostart: {e}")
    
def convert_sang_tieng_viet_khong_dau(input_str):
    convert_text = unidecode(input_str)
    return re.sub(r'[\\/*?:"<>|]', "", convert_text)

def remove_file(file_path):
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
    except:
        getlog()

def get_json_data(file_path=""):
    p = None
    try:
        if os.path.exists(file_path):
            if file_path.endswith('.json'):
                with open(file_path, "r", encoding="utf-8") as file:
                    portalocker.lock(file, portalocker.LOCK_SH)
                    p = json.load(file)
                    portalocker.unlock(file)
            elif file_path.endswith('.pkl'):
                with open(file_path, "rb") as file:
                    portalocker.lock(file, portalocker.LOCK_SH)
                    try:
                        p = pickle.load(file)
                    except:
                        return {}
                    portalocker.unlock(file)
            elif file_path.endswith('.txt'):
                with open(file_path, "r", encoding="utf-8") as file:
                    p = file.readlines()
        return p
    except:
        getlog()
        return None

def save_to_json_file(data, file_path):
    try:
        if file_path.endswith('.json'):
            with open(file_path, "w", encoding="utf-8") as file:
                portalocker.lock(file, portalocker.LOCK_EX)
                json.dump(data, file, indent=3)
                portalocker.unlock(file)
        elif file_path.endswith('.pkl'):
            with open(file_path, "wb") as file:
                portalocker.lock(file, portalocker.LOCK_EX)
                pickle.dump(data, file)
                portalocker.unlock(file)
    except:
        getlog()

def get_txt_data(file_path):
    if not os.path.isfile(file_path):
        return None
    with open(file_path, "r", encoding="utf-8") as file:
        content = file.read()
    return content

def save_list_to_txt(data_list, file_path):
    with open(file_path, "w", encoding="utf-8") as file:
        for item in data_list:
            file.write(f"{item}\n")

def get_json_data_from_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
    else:
        data = None
        print("Failed to fetch the secret file.")
    return data

def getlog(lock=None):
    try:
        print(traceback.print_exc())
        if lock:
            lock["log"].acquire()
            with open("log.txt", "a", encoding='utf-8') as logf:
                logf.write(str(datetime.now()))
                traceback.print_exc(file=logf)
            lock["log"].release()
        else:
            with open("log.txt", "a", encoding='utf-8') as logf:
                logf.write(str(datetime.now()))
                traceback.print_exc(file=logf)
    except:
        pass

def get_float_data(float_string):
    try:
        value = float(float_string)
        return value
    except:
        return None

def check_folder(folder, is_create=False):
    try:
        if not os.path.exists(folder):
            if is_create:
                os.makedirs(folder, exist_ok=True)
            else:
                print(f'Th∆∞ m·ª•c {folder} kh√¥ng t·ªìn t·∫°i.')
                return False
        return True
    except:
        print(f'{folder} kh√¥ng ph·∫£i l√† ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c h·ª£p l·ªá !!!')
        return False
    
def get_output_folder(input_video_path, output_folder_name='output_folder'):
    folder_input, file_name = get_current_folder_and_basename(input_video_path)
    output_folder = f'{folder_input}/{output_folder_name}'
    os.makedirs(output_folder, exist_ok=True)
    return output_folder, file_name

def get_current_folder_and_basename(input_video_path):
    folder_input = os.path.dirname(input_video_path)
    file_name = os.path.basename(input_video_path)
    return folder_input, file_name #file_name bao g·ªìm ph·∫ßn m·ªü r·ªông

def download_video_by_bravedown(video_urls, download_folder=None, root_web="https://bravedown.com/ixigua-video-downloader"):
    try:
        driver = get_chrome_driver_with_profile(show=True)
        # def choose_downlaod_folder():
        #     if download_folder:
        #         try:
        #             driver.get("chrome://settings/downloads")
        #             pyperclip.copy(download_folder)
        #             sleep(1)
        #             press_TAB_key(driver, 2)
        #             sleep(0.5)
        #             press_SPACE_key(driver, 1)
        #             sleep(0.5)
        #             press_key_on_window('tab', 4)
        #             press_key_on_window('space', 1)
        #             keyboard.send('ctrl+v')
        #             press_key_on_window('enter', 4)
        #             sleep(1)
        #         except:
        #             pass
        #     sleep(1)
        # choose_downlaod_folder()
        def verify_human(video_url):
            ele = get_element_by_text(driver, "you are human")
            if ele:
                sleep(4)
                press_TAB_key(driver)
                press_SPACE_key(driver)
                sleep(4)
                input_url(video_url)
        def input_url(video_url):
            xpath = get_xpath_by_multi_attribute('input', ['id="input"'])
            ele = get_element_by_xpath(driver, xpath)
            ele.clear()
            ele.send_keys(video_url)
            sleep(1)
            press_ENTER_key(driver, 1)
            sleep(2)
 
        def get_max_resolution_video():
            try:
                xxx = get_element_by_text(driver, 'No Watermark', tag_name='span')
                if xxx:
                    return xxx
                xpath = get_xpath('i', 'fas fa-volume-up')
                ele = get_element_by_xpath(driver, xpath, index=-1)
                return ele
            except:
                return None
        cnt=0
        download_info = get_json_data(download_info_path)
        download_from, root_web = get_download_flatform(video_urls[0])
        sleep(5)
        driver.get(root_web)
        sleep(5)
        for video_url in video_urls.copy():
            if cnt==0:
                verify_human(video_url)
            else:
                driver.get(root_web)
                sleep(3)
            input_url(video_url)
            ele = get_max_resolution_video()
            if not ele:
                continue
            parent = find_parent_element(ele, 1, 'a')
            url_data = parent.get_attribute("data-linkdown")
            driver.get(url_data)
            sleep(1)
            press_key_on_window(key='enter')
            sleep(1)
            cnt += 1
            if video_url not in download_info['downloaded_urls']:
                download_info['downloaded_urls'].append(video_url)
            video_urls.remove(video_url)
            sleep(2)
            print(f'T·∫£i th√†nh c√¥ng video: {video_url}')
        if cnt > 0:
            print(f'  --> ƒê√£ t·∫£i ƒë∆∞·ª£c {cnt} video.')
            return True
        else:
            return False
    except:
        getlog()
        print("C√≥ l·ªói khi t·∫£i video t·ª´ web !!!")
        return False
    finally:
        if driver:
            driver.quit()

def get_download_flatform(video_url):
    if "//www.douyin.com/" in video_url:
        download_flatform = "douyin"
        root_web = "https://bravedown.com/douyin-video-downloader"
    # elif "//www.youtube.com/" in video_url or "youtu.be/" in video_url:
    #     download_flatform = "youtube"
    #     root_web = "https://bravedown.com/youtube-video-downloader"
    elif "//www.facebook.com/" in video_url:
        download_flatform = "facebook"
        root_web = "https://bravedown.com/facebook-video-downloader"
    elif "//www.instagram.com/" in video_url:
        download_flatform = "instagram"
        root_web = "https://bravedown.com/instagram-video-downloader"
    elif "//www.twitter.com/" in video_url or "//twitter.com/" in video_url:
        download_flatform = "twitter"
        root_web = "https://bravedown.com/twitter-video-downloader"
    elif "//www.tiktok.com/" in video_url:
        download_flatform = "tiktok"
        root_web = "https://bravedown.com/tiktok-downloader"
    elif "//www.vimeo.com/" in video_url:
        download_flatform = "vimeo"
        root_web = "https://bravedown.com/vimeo-downloader"
    elif "//www.reddit.com/" in video_url:
        download_flatform = "reddit"
        root_web = "https://bravedown.com/reddit-downloader"
    elif "//www.dailymotion.com/" in video_url:
        download_flatform = "dailymotion"
        root_web = "https://bravedown.com/dailymotion-video-downloader"
    elif "//www.vk.com/" in video_url:
        download_flatform = "vk"
        root_web = "https://bravedown.com/vk-video-downloader"
    elif "//www.bilibili.com/" in video_url:
        download_flatform = "bilibili"
        root_web = "https://bravedown.com/bilibili-downloader"
    elif "//www.snapchat.com/" in video_url:
        download_flatform = "snapchat"
        root_web = "https://bravedown.com/snapchat-video-downloader"
    elif "baidu.com/" in video_url:
        download_flatform = "baidu"
        root_web = "https://bravedown.com/baidu-video-downloader"
    elif "www.threads.net/" in video_url:
        download_flatform = "threads"
        root_web = "https://bravedown.com/threads-downloader"
    elif "kuaishou.com/" in video_url:
        download_flatform = "kuaishou"
        root_web = "https://bravedown.com/kuaishou-video-downloader"
    else:
        if 'youtube.com/' in video_url:
            download_flatform = 'youtube'
        else:
            download_flatform = "ixigua"
        root_web = "https://bravedown.com/ixigua-video-downloader"
    return download_flatform, root_web

def download_video_by_url(url, download_folder=None, file_path=None, sleep_time=5, return_file_path=False):
    t = time()
    if not url:
        return False
    try:
        if file_path:
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
                'outtmpl': file_path,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download(url)
        else:
            if not download_folder:
                return False
            def get_file_path(file_name):
                chars = ["/", "\\", ":", "|", "?", "*", "<", ">", "\"", "."]
                for char in chars:
                    if char in file_name:
                        file_name = file_name.replace(char, "")
                    if len(file_name) > 100:
                        file_name = file_name[:100]
                file_path = os.path.join(download_folder, f"{file_name}.mp4")
                return file_path
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
                'outtmpl': f'{download_folder}/%(title)s.%(ext)s'
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=False)
                title = info_dict.get('title', 'video')
                if title == 'video':
                    cnt = 1
                    while True:
                        file_path = os.path.join(download_folder, f"{title}_{cnt}.mp4")
                        if os.path.exists(file_path):
                            cnt += 1
                        else:
                            break
                else:
                    file_path = get_file_path(title)
                    cnt = 0
                    while True:
                        if os.path.exists(file_path):
                            cnt += 1
                            file_path = f"{file_path.split('.mp4')[0]}_{cnt}.mp4"
                        else:
                            break
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
                'outtmpl': file_path,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download(url)
        t1 = time() - t
        if t1 < sleep_time:
            sleep(sleep_time-t1)
        print(f'T·∫£i th√†nh c√¥ng video: {file_path}')
        if return_file_path:
            return file_path
        else:
            return True
    except:
        return None
    
def get_info_by_url(url, download_folder=None, is_download=False):
    if not url:
        return None
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'writesubtitles': True,
            'allsubtitles': True,
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
            'outtmpl': f'{download_folder}/%(title)s.%(ext)s',
            'addmetadata': False,
            'nocheckcertificate': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_video = ydl.extract_info(url, download=False)
            if is_download:
                ydl.download(url)
                video_path = f"{info_video['title']}.mp4"
                video_path = os.path.join(download_folder, video_path)
                sleep(1)
                return video_path
            else:
                return info_video
    except:
        getlog()
        return None

def rename_files_by_index(folder_path, base_name="", extension=None, start_index=1):
    if not extension:
        extension = '.mp4'
    try:
        start_index = int(start_index)
    except:
        start_index = 1
    files = [file for file in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file)) and file.endswith(extension)]
    files = natsorted(files)
    for index, file_name in enumerate(files, start=start_index):
        old_file_path = os.path.join(folder_path, file_name)
        if '<index>' in base_name:
            name = base_name.replace('<index>', str(index))
            new_file_name = f'{name}{extension}'
        else:
            print("Kh√¥ng c√≥ chu·ªói <index> trong t√™n chung n√™n s·ªë th·ª© t·ª± s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t ·ªü cu·ªëi t√™n file.")
            new_file_name = f"{base_name}{index}{extension}"
        new_file_path = os.path.join(folder_path, new_file_name)
        try:
            os.rename(old_file_path, new_file_path)
            print(f"ƒê√£ ƒë·ªïi t√™n {old_file_path} th√†nh {new_file_path}")
        except:
            print(f"ƒê·ªïi t√™n file {old_file_path} kh√¥ng th√†nh c√¥ng")

def remove_char_in_file_name(folder_path, chars_want_to_remove, extension=None):
    if not extension:
        extension = '.mp4'
    try:
        chars = chars_want_to_remove.split(',')
        if len(chars) == 0:
            return
        files = [file for file in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file)) and file.endswith(extension)]
        files = natsorted(files)
        for i, file_name in enumerate(files):
            base_name = file_name.split(extension)[0]
            for char in chars:
                if char in base_name:
                    base_name = base_name.replace(char, "")
            old_file_path = os.path.join(folder_path, file_name)
            new_file_name = f"{base_name}{extension}"
            new_file_path = os.path.join(folder_path, new_file_name)
            try:
                os.rename(old_file_path, new_file_path)
                print(f"ƒê√£ ƒë·ªïi t√™n {old_file_path} th√†nh {new_file_path}")
            except:
                print(f"ƒê·ªïi t√™n file {old_file_path} kh√¥ng th√†nh c√¥ng")
    except:
        pass

def remove_or_move_file(input_video_path, is_delete=False, finish_folder_name='finished folder'):
    try:
        if is_delete:
            os.remove(input_video_path)
        else:
            videos_folder = os.path.dirname(input_video_path)
            finish_folder = os.path.join(videos_folder, f'{finish_folder_name}')
            os.makedirs(finish_folder, exist_ok=True)
            base_name = os.path.basename(input_video_path)
            move_file_path = os.path.join(finish_folder, base_name)
            shutil.move(input_video_path, move_file_path)
    except:
        print(f"Kh√¥ng th·ªÉ x√≥a ho·∫∑c di chuy·ªÉn file {input_video_path}")
        

def check_datetime_input(date_str, time_str):
    try:
        input_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        current_time_plus_30 = datetime.now() + timedelta(minutes=30)
        if input_time <= current_time_plus_30:
            print(f'Th·ªùi gian mu·ªën ƒëƒÉng v√†o l√† {time_str} ng√†y {date_str} kh√¥ng h·ª£p l·ªá --> Ph·∫£i ƒëƒÉng sau 30 ph√∫t so v·ªõi th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.')
            return False
        return True
    except:
        print("ƒê·ªãnh d·∫°ng gi·ªù kh√¥ng ƒë√∫ng hh:mm")
        return False

def get_upload_date(upload_date, next_day=False):
    current_date = datetime.now().date()
    if isinstance(upload_date, str):
        try:
            upload_date = convert_date_string_to_datetime(upload_date)
        except:
            upload_date = current_date
    try:
        if upload_date <= current_date:
            upload_date = current_date
    except:
        upload_date = current_date
    if next_day and upload_date == current_date:
        upload_date = upload_date + timedelta(days=1)
    return upload_date

def get_day_gap(day_gap):
    if not day_gap:
        day_gap = "1"
    try:
        day_gap = int(day_gap.strip())
    except:
        day_gap = 1
    return day_gap

def get_number_of_days(number_of_days):
    if not number_of_days:
        number_of_days = "10"
    try:
        number_of_days = int(number_of_days.strip())
    except:
        number_of_days = 1
    return number_of_days

def convert_boolean_to_Yes_No(value):
    if value:
        return 'Yes'
    else:
        return 'No'
    
def press_esc_key(cnt=1, driver=None):
    if driver:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.ESCAPE).perform()
            sleep(0.3)

def press_TAB_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.TAB).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t TAB")

def press_SPACE_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.SPACE).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t SPACE")

def press_ENTER_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.ENTER).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t ENTER")

def input_text_to_driver(driver, text):
    """Nh·∫≠p vƒÉn b·∫£n v√†o tr√¨nh duy·ªát"""
    try:
        actions = ActionChains(driver)
        actions.send_keys(text).perform()
        sleep(0.5)
    except:
        print("Kh√¥ng th·ªÉ nh·∫≠p vƒÉn b·∫£n")

def press_ARROW_DOWN_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.ARROW_DOWN).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t Xu·ªëng")

def press_key_on_window(key, cnt=1):
    """B·∫•m m·ªôt ph√≠m tr√™n Windows nhi·ªÅu l·∫ßn v·ªõi kho·∫£ng ngh·ªâ gi·ªØa c√°c l·∫ßn b·∫•m."""
    try:
        for _ in range(cnt):
            keyboard.send(key)
            sleep(0.3)
    except:
        print(f"Kh√¥ng th·ªÉ b·∫•m n√∫t {key.upper()}")

def get_views_text(views_ele):
    match = re.search(r'(\d+(?:\.\d+)?)([KMB]?)', views_ele)
    if match:
        number = float(match.group(1))
        unit = match.group(2)
        return f'{number}{unit}'
    return None

def get_view_count(view_count=""):
    if view_count:
        try:
            view_count = view_count.split('views')[0].strip()
            if 'B' in view_count:
                view_count = float(view_count.replace('B', '')) * 1000000000
            elif 'M' in view_count:
                view_count = float(view_count.replace('M', '')) * 1000000
            elif 'K' in view_count:
                view_count = float(view_count.replace('K', '')) * 1000
            else:
                view_count = int(float(view_count))
        except:
                getlog()
                view_count = 0
    else:
        view_count = 0
    return view_count

def get_image_from_video(videos_folder, position=None, noti=True):
    try:
        if position:
            time_position = convert_time_to_seconds(position)
        else:
            print("H√£y ch·ªçn th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh t·ª´ video.")
            return
    except:
        print("ƒê·ªãnh d·∫°ng th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh kh√¥ng h·ª£p l·ªá.")
        return
    videos = os.listdir(videos_folder)
    videos = [k for k in videos if k.endswith('.mp4')]      
    if len(videos) == 0:
        if noti:
            print(f"Kh√¥ng t√¨m th·∫•y video trong th∆∞ m·ª•c {videos_folder}")
        return
    try:
        output_folder = os.path.join(videos_folder, 'images')
        os.makedirs(output_folder, exist_ok=True)
        for i, video_file in enumerate(videos):
            video_path = os.path.join(videos_folder, video_file)
            video_name = os.path.splitext(video_file)[0]
            image_path = os.path.join(output_folder, f'{video_name}.png')
            if os.path.exists(image_path):
                continue
            video = VideoFileClip(video_path)
            if ':' in position:
                extraction_time = time_position
            else:
                extraction_time = video.duration - time_position
            if extraction_time < 0 or extraction_time > video.duration:
                print(f'Th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh v∆∞·ª£t qu√° th·ªùi l∆∞·ª£ng c·ªßa video {video_file}. L·∫•y th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·ªü cu·ªëi video')
                extraction_time = video.duration
            frame = video.get_frame(extraction_time)
            
            imwrite(image_path, frame)
            video.close()
    except:
        getlog()
        print("C√≥ l·ªói trong qu√° tr√¨nh tr√≠ch xu·∫•t ·∫£nh t·ª´ video !!!")

def get_time_check_cycle(time_check_string):
    try:
        time_check = int(float(time_check_string))
    except:
        time_check = 0
    return time_check * 60

def check_folder(folder):
    if not folder:
        print("H√£y ch·ªçn th∆∞ m·ª•c l∆∞u video.")
        return False
    if not os.path.isdir(folder):
        print(f"Th∆∞ m·ª•c {folder} kh√¥ng t·ªìn t·∫°i.")
        return False
    return True

def get_random_audio_path(new_audio_folder):
    audios = get_file_in_folder_by_type(new_audio_folder, file_type=".mp3", is_sort=False)
    if not audios:
        return None
    return os.path.join(new_audio_folder, random.choice(audios))
    
def get_file_in_folder_by_type(folder, file_type=".mp4", is_sort=True, noti=True):
    try:
        if not os.path.exists(folder):
            if noti:
                print(f"Th∆∞ m·ª•c {folder} kh√¥ng t·ªìn t·∫°i !!!")
            return None
        list_files = os.listdir(folder)
        list_files = [k for k in list_files if k.endswith(file_type)]      
        if len(list_files) == 0:
            if noti:
                print(f"Kh√¥ng t√¨m th·∫•y file {file_type} trong th∆∞ m·ª•c {folder} !!!")
            return None
        if is_sort:
            list_files = natsorted(list_files)
        return list_files
    except:
        return None

def move_file_from_folder_to_folder(folder1, folder2):
    try:
        for filename in os.listdir(folder1):
            folder1_file = os.path.join(folder1, filename)
            folder2_file = os.path.join(folder2, filename)
            if os.path.isfile(folder1_file):
                shutil.move(folder1_file, folder2_file)
    except:
        pass
        

#--------------------------CTK----------------------------

def choose_folder():
    folder_path = filedialog.askdirectory()
    return folder_path

def choose_file():
    file_path = filedialog.askopenfilename( title="Select a file", filetypes=(("All files", "*.*"),) )
    return file_path

def message_aks(message):
    messagebox.askquestion(title="Question", message=message)
def warning_message(message):
    messagebox.showinfo(title="WARNING", message=message)
def notification(parent=None, message=""):
    try:
        if parent:
            parent.after(0, lambda: messagebox.showinfo(title="Notification", message=message))
        else:
            messagebox.showinfo(title="Notification", message=message)
    except:
        pass

def error_message(message):
    messagebox.showinfo(title="ERROR", message=message)

def clear_widgets(root):
    for widget in root.winfo_children():
        widget.pack_forget()

def create_button_icon(frame = None, command=None, image=None, side=None, width=60):
    button = ctk.CTkButton( master=frame, text="", command=command, image=image, width=width)
    if side:
        button.pack(side=side, padx=0, pady=0)
    else:    
        button.pack(padx=0, pady=0)
    return button

def create_button(frame = None, text="", command=None, width=width_window, compound="left", anchor="center", image=None, side=None, pady=pady, padx=padx):
    button = ctk.CTkButton(master=frame, text=text, command=command, image=image, width=width, height= height_element, compound=compound, anchor=anchor, )
    if side:
        button.pack(side=side, pady=pady, padx=padx)
    else:    
        button.pack(pady=pady, padx=padx)
    return button

def create_label(frame=None, text="", compound="center", anchor="w", width=width_window, height=height_element, wraplength=None, side=None):
    if not width:
        width = width
    wraplength = width - 20
    label = ctk.CTkLabel(master=frame, text=text, width=width, height= height_element, wraplength=wraplength, anchor=anchor, compound=compound)
    if side:
        label.pack(side=side, pady=pady, padx=padx)
    else:
        label.pack(pady=pady, padx=padx)
    return label

def create_frame(frame, fill='x', side=None):
    frame = ctk.CTkFrame(master=frame, height=height_element*0.9)
    frame.pack(padx=padx, pady=pady, fill=fill, side=side)
    return frame

def create_text_input(frame, width=width_window, placeholder=None, side="right", default="", is_password=False):
    if not width:
        width = width
    if is_password:
        text_input = ctk.CTkEntry(master=frame, width=width, height=height_element*0.8, placeholder_text=placeholder, textvariable=default, show="*")
    else:
        text_input = ctk.CTkEntry(master=frame, width=width, height=height_element*0.8, placeholder_text=placeholder, textvariable=default)
    text_input.pack(pady=pady, padx=padx, side=side)
    return text_input

def create_combobox(frame, values=None, variable=None, side=RIGHT, width=width_window, height=height_element):
    val=None
    if variable:
        val = ctk.StringVar(value=str(variable))

    combobox = ctk.CTkComboBox(master=frame, values=values, variable=val, width=width, height=height)
    combobox.pack(side=side, padx=padx, pady=pady)
    return combobox

def create_frame_label_and_progress_bar(frame, text="", width=width_window, left=left, right=right):
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT)
    processbar = create_progress_bar(frame=frame, width=width*right, side=RIGHT)
    return frame, processbar

def create_progress_bar(frame=None, width=width_window):
    processbar = ctk.CTkProgressBar(master=frame, width=width)
    processbar.pack(padx=padx, pady=pady)
    return processbar

def create_frame_label_input_input(root, text="", place_holder1=None, place_holder2=None, width=width_window, left=0.25, mid=0.56, right=0.19):
    frame = create_frame(root)
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT, anchor='w')
    entry1 = create_text_input(frame=frame, width=width*mid, placeholder=place_holder1, side=RIGHT)
    entry2 = create_text_input(frame=frame, width=width*right, placeholder=place_holder2)
    return entry1, entry2

def create_frame_label_and_input(root, text="", place_holder=None, width=width_window, left=left, right=right, is_password=False):
    frame = create_frame(root)
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT, anchor='w')
    entry = create_text_input(frame=frame, width=width*right, placeholder=place_holder, is_password=is_password)

    return entry

def create_frame_button_input_input(root,text, width=width_window, place_holder1=None, place_holder2=None, command=None, left=0.25, mid=0.56, right=0.19):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    entry1 = create_text_input(frame, width=width*mid, placeholder=place_holder1, side=RIGHT)
    entry2 = create_text_input(frame, width=width*right, placeholder=place_holder2)
    return entry1, entry2

def create_frame_button_and_input(root, text, width=width_window, place_holder=None, command=None, left=left, right=right):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    entry = create_text_input(frame, width=width*right, placeholder=place_holder)
    return entry

def create_frame_button_and_combobox(root, text, command=None, width=width_window, values=None, variable=None, left=left, right=right):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    combobox = create_combobox(frame, width=width*right, side=RIGHT, values=values, variable=variable)
    return combobox

def create_frame_button_and_button(root, text1, text2, command1=None, command2=None, width=width_window, left=left, right=right):
    frame = create_frame(root)
    button1 = create_button(frame=frame, text=text1, width=width*left , side=LEFT, command=command1)
    button2 = create_button(frame=frame, text=text2, width=width*right -15, side=RIGHT, command=command2)
    return button1, button2

#----------------------edit video/ audio--------------------------------

def run_command_ffmpeg(command, hide=True):
    try:
        if hide:
            subprocess.run(command, check=True, text=True, encoding='utf-8', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.run(command, check=True, text=True, encoding='utf-8', stdout=subprocess.DEVNULL)
        return True
    except:
        getlog()
        return False

def run_command_with_progress(command, duration):
    try:
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            encoding='utf-8',
        )

        current_time = 0.0
        check=False
        for line in process.stdout:
            if 'out_time_ms=' in line:
                match = re.search(r'out_time_ms=(\d+)', line)
                if match:
                    out_time_ms = int(match.group(1))
                    current_time = out_time_ms / 1000000.0
                    percent_complete = (current_time / duration) * 100
                    sys.stdout.write(f'\rƒê√£ x·ª≠ l√Ω: {percent_complete:.2f}%')
                    sys.stdout.flush()
                    check = True
        process.wait()
        return check
    except:
        getlog()
        return False

def get_video_info(input_file):
    try:
        cmd = [
            'ffprobe',
            '-v', 'error',
            '-select_streams', 'v:0',
            '-show_entries', 'stream=width,height,r_frame_rate,duration',
            '-of', 'json',
            input_file
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        info = json.loads(result.stdout)
        video_info = info['streams'][0]
        width = video_info['width']
        height = video_info['height']
        duration = video_info['duration']
        r_frame_rate = video_info.get('r_frame_rate', '0/1')
        numerator, denominator = map(int, r_frame_rate.split('/'))
        fps = numerator / denominator if denominator != 0 else 0
        return {
            'width': width,
            'height': height,
            'fps': fps,
            'duration': duration
        }
    except:
        try:
            clip = VideoFileClip(input_file)
            video_info = {}
            width, height = clip.size
            duration = clip.duration
            fps = clip.fps
            clip.close()
            return {
                'width': width,
                'height': height,
                'fps': fps,
                'duration': duration
            }
        except:
            return None

def get_audio_info(audio_path):
    cmd = ["ffprobe", "-v", "quiet", "-print_format", "json", "-show_format", "-show_streams", audio_path]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    info = json.loads(result.stdout)
    streams_info = info.get("streams", [])
    if not streams_info:
        print(f"L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin c·ªßa audio {audio_path}")
        return None
    streams_info = streams_info[0]
    return streams_info

def cut_video_by_timeline_use_ffmpeg(input_video_path, segments, is_connect='no', is_delete=False, fast_cut=True, get_audio=False):
    ti = time()
    if fast_cut:
        print("..........................")
        print("B·∫Øt ƒë·∫ßu c·∫Øt nhanh video...")
    else:
        print("B·∫Øt ƒë·∫ßu c·∫Øt video...")
    try:
        output_folder, file_name = get_output_folder(input_video_path, output_folder_name='cut_video')
        output_file_path = os.path.join(output_folder, file_name)
        temp_list_file = os.path.join(output_folder, "temp_list.txt")
        remove_file(temp_list_file)
        combine_videos = []
        video_info = get_video_info(input_video_path)
        if not video_info:
            return None, f"Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin video {input_video_path}"
        duration = float(video_info['duration'])
        end = "0"
        try:
            segments = segments.split(',')
        except:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt l√† start-end v·ªõi start,end l√† hh:mm:ss ho·∫∑c mm:ss ho·∫∑c ss")
            return None, "C√≥ l·ªói khi c·∫Øt video"
        for i, segment in enumerate(segments, start=0):
            segment = segment.strip()
            if i==0 and '-' not in segment:
                start, end = "0", segment
            elif '-' not in segment:
                start = str(end)
                end = segment
            else:
                start, end = segment.split('-')
            start = convert_time_to_seconds(start)
            end = convert_time_to_seconds(end)
            if start is None or end is None:
                print("Th·ªùi gian c·∫Øt kh√¥ng h·ª£p l·ªá.")
                return
            if end > duration:
                end = duration
            base_name = file_name.split('.mp4')[0]
            index = 1
            if len(segments) == 1:
                segment_file_path = os.path.join(output_folder, file_name)
                if os.path.exists(segment_file_path):
                    segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
            else:
                segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
            while True:
                if os.path.exists(segment_file_path):
                    index +=1
                    segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
                else:
                    break

            if fast_cut:
                command = [
                    'ffmpeg', '-progress', 'pipe:1', '-accurate_seek', '-ss', str(start), '-i', input_video_path,
                    '-to', str(end - start), '-c:v', 'copy', '-c:a', 'copy', '-fps_mode', 'cfr',
                    '-y', segment_file_path, '-loglevel', 'quiet'
                ]
            else:
                command = [
                    'ffmpeg', '-progress', 'pipe:1', '-i', input_video_path, '-ss', str(start), '-to', str(end), '-c:v', 'libx264', '-c:a', 'aac', '-strict', 'experimental', '-b:a', '192k', '-y', segment_file_path, '-loglevel', 'quiet'
                ]
            if not run_command_with_progress(command, duration):
                cut_video_by_moviepy(input_video_path, segment_file_path, start, end)

            if get_audio:
                download_folder = os.path.join(output_folder, "extracted_audio")
                os.makedirs(download_folder, exist_ok=True)
                extract_audio_ffmpeg(video_path=segment_file_path, download_folder=download_folder)
            if is_connect:
                combine_videos.append(segment_file_path)


        if is_connect != 'no' and len(combine_videos) > 1:
            try:
                with open(temp_list_file, 'w', encoding= 'utf-8') as f:
                    for video in combine_videos:
                        f.write(f"file '{video}'\n")
                command = connect_video(temp_list_file, output_file_path, fast_connect=is_connect == 'fast connect')
                run_command_ffmpeg(command)
                try:
                    for video in combine_videos:
                        remove_file(video)
                    remove_file(temp_list_file)
                except:
                    pass
            except:
                merge_videos_use_moviepy(videos_list=combine_videos, file_path=output_file_path, is_delete=is_delete, fps=int(video_info['fps']))
        cat = time() - ti
        print(f'---> Th·ªùi gian c·∫Øt video {input_video_path} l√† {int(cat)}s')
        return True, None
    except:
        return cut_video_by_timeline_use_moviepy(input_video_path, segments, is_connect, is_delete=is_delete)

        
def cut_video_by_moviepy(input_video_path, output_file_path, start, end):
    try:
        clip = VideoFileClip(input_video_path)
        sub_clip = clip.subclip(start, end)
        sub_clip.write_videofile(output_file_path, codec='libx264')
        sub_clip.close()
        clip.close()
    except:
        print(f"!!! C·∫Øt video {input_video_path} th·∫•t b·∫°i !!!")

def cut_video_by_timeline_use_moviepy(input_video_path, segments, is_connect, is_delete=False):
    try:
        output_folder, file_name = get_output_folder(input_video_path, output_folder_name='cut_video')
        clips = []
        i = 0
        video = VideoFileClip(input_video_path)
        duration = video.duration
        try:
            segments = segments.split(',')
        except:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt l√† start-end v·ªõi start,end l√† hh:mm:ss ho·∫∑c mm:ss ho·∫∑c ss")
            return None, "C√≥ l·ªói khi c·∫Øt video"
        for segment in segments:
            segment = segment.strip()
            start, end = segment.split('-')
            list_start = start.split(':')
            cnt = len(list_start)
            if cnt == 3:
                start = int(list_start[0]) * 3600 + int(list_start[1]) * 60 + int(list_start[2])
            elif cnt == 2:
                start = int(list_start[0]) * 60 + int(list_start[1])
            elif cnt == 1:
                start = int(list_start[0])
            else:
                message = "ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt ·ªü ƒë·∫ßu video kh√¥ng ƒë√∫ng. ƒê·ªãnh d·∫°ng ƒë√∫ng l√† hh:mm:ss-hh:mm:ss ho·∫∑c mm:ss-mm:ss ho·∫∑c ss-ss"
                return False, message

            # Chuy·ªÉn ƒë·ªïi th·ªùi gian k·∫øt th√∫c
            list_end = end.split(':')
            cnt = len(list_end)
            if cnt == 3:
                end = int(list_end[0]) * 3600 + int(list_end[1]) * 60 + int(list_end[2])
            elif cnt == 2:
                end = int(list_end[0]) * 60 + int(list_end[1])
            elif cnt == 1:
                end = int(list_end[0])
            else:
                message = "ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt ·ªü ƒë·∫ßu video kh√¥ng ƒë√∫ng. ƒê·ªãnh d·∫°ng ƒë√∫ng l√† hh:mm:ss-hh:mm:ss ho·∫∑c mm:ss-mm:ss ho·∫∑c ss-ss"
                return False, message
            if end > duration:
                end = duration
            clip = video.subclip(start, end)
            if is_connect:
                clips.append(clip)
                sleep(1)
            else:
                i += 1
                file_path = f"{output_folder}\\{file_name}"
                clip.write_videofile(file_path, codec='libx264')
                clip.close()
                sleep(1)
        if is_connect and len(clips) > 0:
            final_clip = concatenate_videoclips(clips, method="compose")
            file_path = f"{output_folder}\\{file_name.split('.mp4')[0]}_1.mp4"
            final_clip.write_videofile(file_path, codec='libx264')
            final_clip.close()
            for clip in clips:
                clip.close()
        video.close()
        return True, None
    except Exception as e:
        if video:
            video.close()
        getlog()
        return False, "C√≥ l·ªói trong qu√° tr√¨nh c·∫Øt video."


def merge_videos_use_ffmpeg(videos_folder, file_name=None, is_delete=False, videos_path=None, fast_combine=True):
    ti = time()
    if fast_combine:
        print("..........................")
        print("B·∫Øt ƒë·∫ßu n·ªëi nhanh video...")
    else:
        print("B·∫Øt ƒë·∫ßu n·ªëi video...")

    temp_file_path = os.path.join(videos_folder, "temp.txt")
    max_fps = 24
    if not videos_path:
        videos = get_file_in_folder_by_type(videos_folder)
        if not videos:
            return
        if len(videos) <= 1:
            return False, "Ph·∫£i c√≥ √≠t nh·∫•t 2 video trong videos folder"
        videos_path = []
        with open(temp_file_path, 'w') as f:
            for video in videos:
                if video.endswith('.mp4'):
                    video_path = os.path.join(videos_folder, video)
                    video_info = get_video_info(video_path)
                    if not video_info:
                        warning_message(f"D·ª´ng g·ªôp video v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ video {video_path}")
                        return
                    fps = video_info['fps']
                    if fps > max_fps:
                        max_fps = fps
                    f.write(f"file '{video_path}'\n")
                    videos_path.append(video_path)
    else:
        with open(temp_file_path, 'w') as f:
            for video_path in videos_path:
                video_info = get_video_info(video_path)
                if not video_info:
                    warning_message(f"D·ª´ng g·ªôp video v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ video {video_path}")
                    return
                fps = video_info['fps']
                if fps > max_fps:
                    max_fps = fps
                if video_path.endswith('.mp4'):
                    f.write(f"file '{video_path}'\n")
        
    output_folder = f"{videos_folder}\\merge_videos"
    os.makedirs(output_folder, exist_ok=True)
    if file_name:
        file_path = f"{output_folder}\\{file_name}.mp4"
    else:
        file_path = f"{output_folder}\\merge_video.mp4"
    command = connect_video(temp_file_path, file_path, fast_connect=fast_combine, max_fps=max_fps)
    try:
        run_command_ffmpeg(command)
        try:
            remove_file(temp_file_path)
            if is_delete:
                for video_path in videos_path:
                    remove_file(video_path)
        except:
            pass
        noi = time() - ti
        print(f'T·ªïng th·ªùi gian n·ªëi l√† {noi}')
        return True, f"G·ªôp video th√†nh c√¥ng v√†o file {file_path}"
    except:
        merge_videos_use_moviepy(videos_folder, file_path, is_delete, fps=max_fps)
        noi = time() - ti
        print(f'T·ªïng th·ªùi gian n·ªëi l√† {noi}')

def merge_audio_use_ffmpeg(videos_folder, file_name=None, fast_combine=True):
    if fast_combine:
        print("..........................")
        print("B·∫Øt ƒë·∫ßu n·ªëi nhanh audio...")
    else:
        print("B·∫Øt ƒë·∫ßu n·ªëi audio...")

    temp_file_path = os.path.join(videos_folder, "temp.txt")
    audios = get_file_in_folder_by_type(videos_folder, file_type=".mp3")
    if not audios:
        return
    if len(audios) <= 1:
        return False, "Ph·∫£i c√≥ √≠t nh·∫•t 2 video trong videos folder"
    with open(temp_file_path, 'w') as f:
        for audio in audios:
            if audio.endswith('.mp3'):
                audio_path = os.path.join(videos_folder, audio)
                f.write(f"file '{audio_path}'\n")
    output_folder = f"{videos_folder}\\merge_audios"
    os.makedirs(output_folder, exist_ok=True)
    if file_name:
        file_path = f"{output_folder}\\{file_name}.mp3"
    else:
        file_path = f"{output_folder}\\merge_audio.mp3"
    command = connect_audio(temp_file_path, file_path, fast_connect=fast_combine)
    try:
        if run_command_ffmpeg(command):
            try:
                remove_file(temp_file_path)
            except:
                pass
            return True, f"G·ªôp audio th√†nh c√¥ng v√†o file {file_path}"
    except:
        getlog()
    return False, "C√≥ l·ªói khi g·ªôp audio"

def merge_videos_use_moviepy(videos_folder, file_path=None, is_delete=False, videos_list=None, fps=30):
    try:
        if videos_list:
            edit_videos = videos_list
        else:
            edit_videos = get_file_in_folder_by_type(videos_folder)
            if not edit_videos:
                return
            if len(edit_videos) <= 1:
                warning_message("Ph·∫£i c√≥ √≠t nh·∫•t 2 video trong videos folder")
                return
        output_folder = f'{videos_folder}\\merge_videos'
        os.makedirs(output_folder, exist_ok=True)
        clips = []
        remove_videos = []
        for i, video_file in enumerate(edit_videos):
            video_path = f'{videos_folder}\\{video_file}'
            remove_videos.append(video_path)
            clip = VideoFileClip(video_path)
            clips.append(clip)
        if len(clips) > 0:
            final_clip = concatenate_videoclips(clips, method="compose")
            if not file_path:
                file_path = f"{output_folder}\\combine_video.mp4"
            final_clip.write_videofile(file_path, codec='libx264', fps=fps)
            final_clip.close()
            for clip in clips:
                clip.close()
            for clip in clips:
                clip.close()
        for video_path in remove_videos:
            remove_or_move_file(video_path, is_delete=is_delete)
    except:
        print(f"C√≥ l·ªói khi n·ªëi video !!!")


def connect_video(temp_file_path, output_file_path, fast_connect=True, max_fps=None):
    if fast_connect:
        print("---> ƒëang n·ªëi nhanh video...")
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-vf', 'fps=30', '-c:v', 'libx264', '-crf', '23', '-preset', 'veryfast', 
            '-c:a', 'aac', '-b:a', '192k', '-movflags', '+faststart', '-y', output_file_path, '-loglevel', 'quiet'
        ]
    else:
        print("---> ƒëang n·ªëi video...")
        if max_fps:
            command = [
                'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, '-c:v', 'libx264', '-c:a', 'aac', '-r', f'{max_fps}', '-y', output_file_path, '-loglevel', 'quiet'
            ]
        else:
            command = [
                'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, '-c:v', 'libx264', '-c:a', 'aac', '-y', output_file_path, '-loglevel', 'quiet'
            ]
    return command

def connect_audio(temp_file_path, output_file_path, fast_connect=True):
    if fast_connect:
        print("---> ƒëang n·ªëi nhanh audio...")
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-c:a', 'libmp3lame', '-b:a', '192k', '-y', output_file_path, '-loglevel', 'quiet'
        ]
    else:
        print("---> ƒëang n·ªëi audio...")
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-c:a', 'libmp3lame', '-b:a', '192k', '-y', output_file_path, '-loglevel', 'quiet'
        ]
    return command


def get_index_of_temp_file (input_path):
    return int(input_path.split('temp')[-1].split('.mp4')[0])
    
def strip_first_and_end_video(clip, first_cut, end_cut):
    try:
        first_cut = int(first_cut)
    except:
        first_cut = 0
    try:
        end_cut = int(end_cut)
    except:
        end_cut = 0

    if first_cut < 0:
        first_cut = 0
    if end_cut < 0 or end_cut >= clip.duration:
        warning_message("Th·ªùi gian c·∫Øt video kh√¥ng h·ª£p l·ªá.")
        return None
    return clip.subclip(first_cut, clip.duration - end_cut)

def zoom_and_crop(clip, zoom_factor, vertical_position='center', horizontal_position='center'):
    resized_clip = clip.resize(zoom_factor)
    new_width, new_height = resized_clip.size
    y1, y2 = 0, new_height
    x1, x2 = 0, new_width
    if vertical_position == 'center':
        y1 = (new_height - clip.h) // 2
        y2 = y1 + clip.h
    elif vertical_position == 'top':
        y1 = 0
        y2 = clip.h
    elif vertical_position == 'bottom':
        y1 = new_height - clip.h
        y2 = new_height
    if horizontal_position == 'center':
        x1 = (new_width - clip.w) // 2
        x2 = x1 + clip.w
    elif horizontal_position == 'left':
        x1 = 0
        x2 = clip.w
    elif horizontal_position == 'right':
        x1 = new_width - clip.w
        x2 = new_width
    cropped_clip = resized_clip.crop(x1=x1, y1=y1, x2=x2, y2=y2)
    return cropped_clip

def apply_zoom(clip, zoom_factor, vertical_position, horizontal_position):
    if not zoom_factor:
        return clip
    zoom_factor = float(zoom_factor)
    if zoom_factor < 0 or zoom_factor > 3:
        warning_message('T·ª∑ l·ªá zoom kh√¥ng h·ª£p l·ªá.')
        return None
    return zoom_and_crop(clip, zoom_factor, vertical_position, horizontal_position)

def zoom_video_random_intervals(clip, max_zoom_size, vertical_position='center', horizontal_position='center', is_random_zoom="3-5"):
    try:
        min_time_to_change_zoom, max_time_to_change_zoom = is_random_zoom.split('-')
        min_time_to_change_zoom = int(float(min_time_to_change_zoom.strip()))
        max_time_to_change_zoom = int(float(max_time_to_change_zoom.strip()))
    except:
        print("Th·ªùi gian zoom ng·∫´u nhi√™n kh√¥ng ph√π h·ª£p !!!")
        return None
    try:
        max_zoom_size = float(max_zoom_size)
    except:
        print("T·ª∑ l·ªá zoom kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë !!!")
        return None
    if max_time_to_change_zoom > clip.duration:
        max_time_to_change_zoom = clip.duration
    start_times = []
    current_time = 0
    while current_time < clip.duration:
        start_times.append(current_time)
        current_time += random.uniform(min_time_to_change_zoom, max_time_to_change_zoom)
    if start_times[-1] < clip.duration:
        start_times.append(clip.duration)
    zoom_factors = []
    last_zoom_factor = None
    for _ in range(len(start_times) - 1):
        while True:
            new_zoom = round(random.uniform(1.01, max_zoom_size), 2)
            if new_zoom != last_zoom_factor:
                zoom_factors.append(new_zoom)
                last_zoom_factor = new_zoom
                break
    zoomed_clips = []
    try:
        for i, start_time in enumerate(start_times[:-1]):
            end_time = start_times[i + 1]
            sub_clip = clip.subclip(start_time, end_time)
            zoomed_clip = apply_zoom(sub_clip, zoom_factors[i], vertical_position, horizontal_position)
            zoomed_clips.append(zoomed_clip)
    
        final_zoom_clip = concatenate_videoclips(zoomed_clips, method="compose")
        return final_zoom_clip
    except Exception as e:
        getlog()
        return None

def speed_up_clip(clip, speed):
    speed = float(speed)
    if speed < 0 or speed > 3:
        warning_message('invalid speed up')
        return None
    fff = MultiplySpeed(speed)
    sped_up_clip = fff.apply(clip)
    return sped_up_clip

def get_clip_ratio(clip, tolerance=0.02):  #Ki·ªÉm tra video thu·ªôc t·ª∑ l·ªá 16:9 hay 9:16
    clip_width, clip_height = clip.size
    ratio = clip_width / clip_height
    if abs(ratio - (16/9)) < tolerance:  # Ki·ªÉm tra xem t·ª∑ l·ªá g·∫ßn b·∫±ng 16:9
        return (16,9)
    elif abs(ratio - (9/16)) < tolerance:  # Ki·ªÉm tra xem t·ª∑ l·ªá g·∫ßn b·∫±ng 9:16
        return (9,16)
    else:
        return None
    
def resize_clip(clip, re_size=0.999):
    try:
        target_ratio = get_clip_ratio(clip)
        clip_width, clip_height = clip.size
        if target_ratio:
            target_width, target_height = target_ratio
            if clip_width / clip_height != target_width / target_height:
                clip_width = clip_height * target_width / target_height
            
            width = int(clip_width * re_size)
            height = int(clip_height * re_size)
            try:
                clip = resize(clip, newsize=(width, height))
            except:
                ratio = clip_width/clip_height
                new_height = 720/ratio
                clip = resize(clip, newsize=(720, new_height))
        else:
            ratio = clip_width/clip_height
            new_height = 720/ratio
            clip = resize(clip, newsize=(720, new_height))
        return clip
    except:
        getlog()
        return None

def flip_clip(clip):
    # √Åp d·ª•ng hi·ªáu ·ª©ng ƒë·ªëi x·ª©ng (flip) theo chi·ªÅu ngang
    flipped_clip = mirror_x(clip)
    return flipped_clip

def increase_video_quality(input_path, output_path): #TƒÉng ch·∫•t l∆∞·ª£ng video
    try:
        ffmpeg_command = [
            'ffmpeg',
            '-i', input_path,
            '-vf', 'unsharp=luma_msize_x=7:luma_msize_y=7:luma_amount=1.5,'
                    'eq=contrast=1.2:saturation=1.2',  # TƒÉng c∆∞·ªùng ƒë·ªô s·∫Øc n√©t v√† ƒëi·ªÅu ch·ªânh ƒë·ªô t∆∞∆°ng ph·∫£n
            '-c:a', 'copy', '-y',  # Sao ch√©p √¢m thanh g·ªëc
            output_path 
        ]
        subprocess.run(ffmpeg_command, check=True)
        print(f"X·ª≠ l√Ω tƒÉng ƒë·ªô ph√¢n gi·∫£i th√†nh c√¥ng: \n{output_path}")
        return True
    except:
        print(f"C√≥ l·ªói trong qu√° tr√¨nh tƒÉng ch·∫•t l∆∞·ª£ng video: \n{input_path}")
        return False
    
def add_watermark_by_ffmpeg(video_width, video_height, horizontal_watermark_position, vertical_watermark_position):
    try:
        if horizontal_watermark_position == 'center':
            horizontal_watermark_position = 50
        elif horizontal_watermark_position == 'left':
            horizontal_watermark_position = 0
        elif horizontal_watermark_position == 'right':
            horizontal_watermark_position = 100
        else:
            try:
                horizontal_watermark_position = float(horizontal_watermark_position)
                if horizontal_watermark_position > 100:
                    horizontal_watermark_position = 100
                elif horizontal_watermark_position < 0:
                    horizontal_watermark_position = 0
            except:
                horizontal_watermark_position = 50
        if vertical_watermark_position == 'center':
            vertical_watermark_position = 50
        elif vertical_watermark_position == 'top':
            vertical_watermark_position = 0
        elif vertical_watermark_position == 'bottom':
            vertical_watermark_position = 100
        else:
            try:
                vertical_watermark_position = float(vertical_watermark_position)
                if vertical_watermark_position > 100:
                    vertical_watermark_position = 100
                elif vertical_watermark_position < 0:
                    vertical_watermark_position = 0
            except:
                vertical_watermark_position = 50
        watermark_x = int(video_width * horizontal_watermark_position / 100)
        watermark_y = int(video_height * vertical_watermark_position / 100)
        return watermark_x, watermark_y
    except:
        return None, None

def add_image_watermark_into_video(clip, top_bot_overlay_height='2,2', left_right_overlay_width='2,2', watermark=None, vertical_watermark_position=0, horizontal_watermark_position=0, watermark_scale='1,1'):
    w, h = clip.size
    try:
        if not top_bot_overlay_height:
            top_bot_overlay_height = '2,2'
        top_overlay_height, bot_overlay_height = top_bot_overlay_height.split(',')
        if not top_overlay_height or int(top_overlay_height) < 0 or int(top_overlay_height) >= h:
            top_overlay_height = 2
        else:
            top_overlay_height = int(top_overlay_height)
        if not bot_overlay_height or int(bot_overlay_height) < 0 or int(bot_overlay_height) >= (h-top_overlay_height):
            bot_overlay_height = 2
        else:
            bot_overlay_height = int(bot_overlay_height)
    except:
        print("k√≠ch th∆∞·ªõc l·ªõp ph·ªß tr√™n v√† d∆∞·ªõi ƒë√£ nh·∫≠p kh√¥ng h·ª£p l·ªá, l·∫•y k√≠ch th∆∞·ªõc l·ªõp ph·ªß m·∫∑c ƒë·ªãnh l√† 2")
        bot_overlay_height = top_overlay_height = 2

    try:
        if not left_right_overlay_width:
            left_right_overlay_width = '2,2'
        left_overlay_width, right_overlay_width = left_right_overlay_width.split(',')
        if not left_overlay_width or int(left_overlay_width) < 0 or int(left_overlay_width) >= w:
            left_overlay_width = 2
        else:
            left_overlay_width = int(left_overlay_width)
        if not right_overlay_width or int(right_overlay_width) < 0 or int(right_overlay_width) >= (w - left_overlay_width):
            right_overlay_width = 2
        else:
            right_overlay_width = int(right_overlay_width)
    except:
        print("k√≠ch th∆∞·ªõc l·ªõp ph·ªß tr√°i v√† ph·∫£i ƒë√£ nh·∫≠p kh√¥ng h·ª£p l·ªá, l·∫•y k√≠ch th∆∞·ªõc l·ªõp ph·ªß m·∫∑c ƒë·ªãnh l√† 2")
        left_overlay_width = right_overlay_width = 2

    try:
        width, height = clip.size
        top_image = ColorClip(size=(width, top_overlay_height), color=(0, 0, 0)).set_position(('center', 0)).set_duration(clip.duration)
        bottom_image = ColorClip(size=(width, bot_overlay_height), color=(0, 0, 0)).set_position(('center', height - bot_overlay_height)).set_duration(clip.duration)
        left_image = ColorClip(size=(left_overlay_width, height), color=(0, 0, 0)).set_position((0, 'center')).set_duration(clip.duration)
        right_image = ColorClip(size=(right_overlay_width, height), color=(0, 0, 0)).set_position((width - right_overlay_width, 'center')).set_duration(clip.duration)

        if watermark:
            try:
                scale_w, scale_h = [float(s) for s in watermark_scale.split(',')]
            except:
                scale_w = scale_h = 1.0
            watermark_image = ImageClip(watermark).set_duration(clip.duration)
            watermark_width, watermark_height = watermark_image.size
            scaled_width = int(watermark_width * scale_w)
            scaled_height = int(watermark_height * scale_h)

            watermark_image = watermark_image.resize((scaled_width, scaled_height))
            if horizontal_watermark_position == 'center':
                horizontal_watermark_position = (width - scaled_width) / 2
            elif horizontal_watermark_position == 'left':
                horizontal_watermark_position = 0
            elif horizontal_watermark_position == 'right':
                horizontal_watermark_position = width - scaled_width
            else:
                try:
                    horizontal_watermark_position = int(float(horizontal_watermark_position) * width / 100)
                except ValueError:
                    horizontal_watermark_position = (width - scaled_width) / 2

            if vertical_watermark_position == 'center':
                vertical_watermark_position = (height - scaled_height) / 2
            elif vertical_watermark_position == 'top':
                vertical_watermark_position = 0
            elif vertical_watermark_position == 'bottom':
                vertical_watermark_position = height - scaled_height
            else:
                try:
                    vertical_watermark_position = int(float(vertical_watermark_position) * height / 100)
                except ValueError:
                    vertical_watermark_position = (height - scaled_height) / 2

            watermark_image = watermark_image.set_position((horizontal_watermark_position, vertical_watermark_position))
            final_clip = CompositeVideoClip([clip, top_image, bottom_image, left_image, right_image, watermark_image])
        else:
            final_clip = CompositeVideoClip([clip, top_image, bottom_image, left_image, right_image])
        return final_clip

    except Exception as e:
        print(f"L·ªói khi th√™m watermark: {e}")
        return None

def convert_video_169_to_916(input_video_path, zoom_size=None, resolution="1080x1920", is_delete=False):
    try:
        output_folder, file_name = get_output_folder(input_video_path, output_folder_name='converted_videos')
        output_file_path = os.path.join(output_folder, file_name)
        video = VideoFileClip(input_video_path)
        width, height = video.size
        if not zoom_size:
            zoom_size = 0.9
        else:
            zoom_size = float(zoom_size)
        target_width, target_height = list(map(int, resolution.split('x')))
        video_display_height = target_height * zoom_size
        zoom = video_display_height / height
        zoomed_video = video.resize(newsize=(int(width * zoom), int(height * zoom)))
        zoomed_width, zoomed_height = zoomed_video.size
        background = ColorClip(size=(target_width, target_height), color=(0, 0, 0), duration=video.duration)
        x_pos = (target_width - zoomed_width) / 2
        y_pos = (target_height - zoomed_height) / 2
        final_video = CompositeVideoClip([background, zoomed_video.set_position((x_pos, y_pos))], size=(target_width, target_height))
        final_video.write_videofile(output_file_path, codec='libx264', audio_codec='aac')
        final_video.close()
        zoomed_video.close()
        video.close()
        remove_or_move_file(input_video_path, is_delete=is_delete)
        return True
    except Exception as e:
        getlog()
        return False
    
def convert_video_916_to_169(input_video_path, resolution="1920x1080", is_delete=False):
    try:
        if not resolution:
            resolution = '1920x1080'
        resolution = resolution.split('x')
        output_folder, file_name = get_output_folder(input_video_path, output_folder_name='converted_videos')
        output_file_path = os.path.join(output_folder, file_name)
        video = VideoFileClip(input_video_path)
        input_width, input_height = video.size
        new_height = input_width * 9 / 16
        if new_height <= input_height:
            y1 = (input_height - new_height) / 2
            y2 = y1 + new_height
            cropped_video = video.crop(x1=0, x2=input_width, y1=y1, y2=y2)
        else:
            new_width = input_height * 16 / 9
            black_bar = ColorClip(size=(int(new_width), input_height), color=(0, 0, 0))
            video = video.set_position(("center", "center"))
            cropped_video = CompositeVideoClip([black_bar, video]).set_duration(video.duration)
        resized_video = cropped_video.resize(newsize=(resolution[0], resolution[1]))
        resized_video.write_videofile(output_file_path, codec='libx264', audio_codec='aac')
        resized_video.close()
        video.close()
        sleep(1)
        remove_or_move_file(input_video_path, is_delete=is_delete)
        return True
    except:
        getlog()
        return False

def get_and_adjust_resolution_from_clip(clip, scale_factor=0.997):
    width = int(clip.size[0] * scale_factor)
    height = int(clip.size[1] * scale_factor)
    resized_video = clip.resize((width, height))
    return resized_video

def check_vietnamese_characters(filename):
    vietnamese_pattern = re.compile(
        r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        r'√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê]'
    )
    return bool(vietnamese_pattern.search(filename))

def remove_audio_from_clip(clip):
    return clip.without_audio()

def set_audio_for_clip(clip, background_music, background_music_volume="10"):
    try:
        volume = float(background_music_volume)/100
        background_music = AudioFileClip(background_music)
        background_music = background_music.volumex(volume)
        background_music = afx.audio_loop(background_music, duration=clip.duration)
        current_audio = clip.audio
        if current_audio is None:
            clip = clip.set_audio(background_music)
        else:
            combined_audio = CompositeAudioClip([current_audio, background_music])
            clip = clip.set_audio(combined_audio)
        return clip
    except:
        print("C√≥ l·ªói ghi gh√©p audio v√†o video")

def edit_audio_ffmpeg(input_audio_folder, start_cut="0", end_cut="0", pitch_factor=None, speed=None, cut_silence=False, aecho=None, flanger='8', chorus='0.05'):
    try:
        speed = get_float_data(speed)
        if not speed:
            speed = 1
        if aecho:
            aecho = get_float_data(aecho)
            if not aecho:
                print("Th·ªùi gian thi·∫øt l·∫≠p t·∫°o ti·∫øng vang cho audio kh√¥ng h·ª£p l·ªá --> Kh√¥ng √°p d·ª•ng t·∫°o ti·∫øng vang")
        pitch_factor = get_float_data(pitch_factor)
        if not pitch_factor:
            print("Cao ƒë·ªô kh√¥ng h·ª£p l·ªá --> ƒê·∫∑t v·ªÅ 1")
            pitch_factor = 1.0
        try:
            start_cut = float(start_cut)
            end_cut = float(end_cut)
        except:
            print("Gi√° tr·ªã c·ªßa start_cut v√† end_cut kh√¥ng h·ª£p l·ªá. ƒê·∫∑t v·ªÅ 0.")
            start_cut = end_cut = 0

        audios = get_file_in_folder_by_type(input_audio_folder, ".mp3")
        if not audios:
            return
        for audio in audios:
            input_audio_path = os.path.join(input_audio_folder, audio)
            audio_info = get_audio_info(input_audio_path)
            if not audio_info:
                return
            duration = float(audio_info.get("duration", 0))
            if start_cut + end_cut >= duration:
                print("Th·ªùi gian c·∫Øt kh√¥ng h·ª£p l·ªá. ƒê·∫£m b·∫£o r·∫±ng start_cut v√† end_cut kh√¥ng l·ªõn h∆°n th·ªùi gian c·ªßa audio.")
                return
            cut_duration = duration - start_cut - end_cut
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_audio_file:
                temp_audio_path = temp_audio_file.name
            ffmpeg_cmd_cut = [
                "ffmpeg", "-y",
                '-loglevel', 'quiet',
                "-ss", str(start_cut),
                "-i", input_audio_path,
                "-t", str(cut_duration),
                "-c:a", "copy",
                temp_audio_path
            ]
            if not run_command_ffmpeg(ffmpeg_cmd_cut):
                print(f"L·ªói khi x·ª≠ l√Ω audio {input_audio_path}!")
                return
            streams_info = get_audio_info(temp_audio_path)
            if not streams_info:
                return
            output_audio_folder, file_name = get_output_folder(input_audio_path, output_folder_name="edited_audios")
            output_audio_path = os.path.join(output_audio_folder, file_name)
            metadata = {"artist": "None", "album": "None", "title": "None", "encoder": "FFmpeg 6.0"}
            original_sample_rate = int(streams_info.get("sample_rate", 0))
            sample_rate = 44100 if original_sample_rate == 48000 else 48000
            original_bitrate = streams_info.get("bit_rate", "192k")
            bitrate = "256k" if original_bitrate == "192000" else "192k"
            channels = 1 if streams_info.get("channels") == 2 else 2
            volume = "4dB"
            eq_adjust = "equalizer=f=120:width_type=h:width=300:g=7, equalizer=f=1000:width_type=h:width=300:g=-1"
            ffmpeg_cmd_adjust = ["ffmpeg", '-loglevel', 'quiet', "-y", "-i", temp_audio_path]
            for key, value in metadata.items():
                ffmpeg_cmd_adjust += ["-metadata", f"{key}={value}"]
            ffmpeg_cmd_adjust += ["-ar", str(sample_rate), "-b:a", bitrate, "-ac", str(channels)]
            filters = [f"volume={volume}", eq_adjust]
            if speed != 1.0:
                filters.append(f"atempo={speed}")
            if cut_silence:
                filters.append("silenceremove=start_periods=1:start_silence=0.1:start_threshold=-50dB")
            # √Åp d·ª•ng hi·ªáu ·ª©ng t√πy ch·ªçn
            if pitch_factor != 1.0:
                filters.append(f"rubberband=pitch={pitch_factor}")
            if flanger:
                filters.append(f"flanger=delay={flanger}:depth=3:regen=-9:width=77:speed=0.7")
            if aecho:
                filters.append(f"aecho=0.8:0.9:{aecho}:0.2")
            if chorus:
                filters.append(f"chorus=0.8:0.9:50:{chorus}:{chorus}:3")

            if filters:
                ffmpeg_cmd_adjust += ["-af", ",".join(filters)]
            ffmpeg_cmd_adjust += ["-c:a", "libmp3lame", output_audio_path]
            if run_command_ffmpeg(ffmpeg_cmd_adjust):
                print(f"Ch·ªânh s·ª≠a th√¥ng tin audio th√†nh c√¥ng: {output_audio_path}")
            else:
                print(f"L·ªói khi thay ƒë·ªïi th√¥ng tin audio !!!")
            os.remove(temp_audio_path)
    except:
        print("C√≥ l·ªói trong qu√° tr√¨nh ch·ªânh s·ª≠a audio !!!")

def extract_audio_ffmpeg(audio_path=None, video_path=None, video_url=None, video_folder=None, segments=None, download_folder=None, file_type='wav', speed='1.0'):
    try:
        if not segments:
            segments = "0-999999999999"
        try:
            segments = segments.split(',')
        except:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt l√† start-end v·ªõi start,end l√† hh:mm:ss ho·∫∑c mm:ss ho·∫∑c ss")
            return
        try:
            speed = float(speed)
        except:
            speed = 1.0

        if video_url:
            video_path = download_video_by_url(video_url, download_folder, return_file_path=True)

        for segment in segments:
            segment = segment.strip()
            start, end = segment.split('-')
            start = convert_time_to_seconds(start)
            if start is None:
                return
            end = convert_time_to_seconds(end)
            if end is None:
                return
            target_paths = []
            if audio_path:
                target_path = audio_path
            elif video_path:
                target_path = video_path
            elif video_folder:
                videos =  get_file_in_folder_by_type(video_folder, ".mp4")   
                if not videos:
                    return
                for video in videos:
                    video_path = os.path.join(video_folder, video)
                    target_paths.append(video_path)
            else:
                warning_message("Vui l√≤ng ch·ªçn ngu·ªìn ƒë·ªÉ edit video")
                return
            if video_url or audio_path or video_path:
                target_paths.append(target_path)

            output_folder = os.path.join(os.path.dirname(target_path), 'extract_audios')
            os.makedirs(output_folder, exist_ok=True)
            for target_path in target_paths:
                video_clip = None
                if '.wav' in target_path or '.mp3' in target_path:
                    audio_clip = AudioFileClip(target_path)
                else:
                    video_clip = VideoFileClip(target_path)
                    audio_clip = video_clip.audio
                duration = audio_clip.duration
                if end > duration:
                    end = duration
                file_name = os.path.basename(target_path)
                audio_name = file_name.split('.')[0]
                cnt_cut = 1
                while True:
                    output_audio_path = f'{output_folder}/{audio_name}_{cnt_cut}.{file_type}'
                    if os.path.exists(output_audio_path):
                        cnt_cut += 1
                    else:
                        break
                try:
                    ffmpeg_cmd = [ "ffmpeg", "-y", "-i", target_path, "-ss", str(start), "-to", str(end), "-ac", "1", "-ar", "24000", "-filter:a", f"atempo={speed}", "-sample_fmt", "s16", output_audio_path ]
                    run_command_ffmpeg(ffmpeg_cmd)
                except:
                    getlog()
                    print(f'C√≥ l·ªói trong khi tr√≠ch xu·∫•t audio')
                    
                if audio_clip:
                    audio_clip.close()
                if video_clip:
                    video_clip.close()
                print(f"  --> Tr√≠ch xu·∫•t th√†nh c√¥ng audio t·ª´ video {target_path}")
        if video_url:
            remove_file(video_path)
    except:
        getlog()
        print("C√≥ l·ªói trong qu√° tr√¨nh tr√≠ch xu·∫•t audio !!!")





def process_video(input_path, wave_amplitude=3, wave_frequency=0.05, 
                  line_spacing=10, line_thickness=5, line_opacity=0.7,
                  text_top_input="TOP TEXT", text_bottom_input="BOTTOM TEXT"):
    curr_folder = os.path.dirname(input_path)
    out_path = os.path.join(curr_folder, 'temp.mp4')
    
    cap = cv2.VideoCapture(input_path)
    if not cap.isOpened():
        print("Kh√¥ng th·ªÉ m·ªü video!")
        return None

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width, height = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    out = cv2.VideoWriter(out_path, fourcc, fps, (width, height))
    print(f'{fps} - {width}x{height}')
    scene_changes, total_frames = detect_scene_changes_and_total_frames(input_path)
    new_scene_changes=[]
    if scene_changes:  # Ki·ªÉm tra danh s√°ch kh√¥ng r·ªóng
        new_scene_changes.append(scene_changes[0])  # Gi·ªØ ƒëi·ªÉm ƒë·∫ßu ti√™n

    for i in range(1, len(scene_changes)):
        if new_scene_changes and (scene_changes[i] - new_scene_changes[-1] > 5 * fps):
            new_scene_changes.append(scene_changes[i])


    print(f'{len(scene_changes)}')
    print(f'C√°c ƒëi·ªÉm chuy·ªÉn c·∫£nh: {new_scene_changes}')
    frame_idx = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        processed_frame = add_effects(frame, frame_idx, wave_amplitude, wave_frequency, 
                                      line_spacing, line_thickness, line_opacity, 
                                      text_top_input, text_bottom_input, new_scene_changes, total_frames)
        out.write(processed_frame)
        frame_idx += 1
    
    cap.release()
    out.release()
    print("X·ª≠ l√Ω video ho√†n t·∫•t!")
    return out_path

def draw_multiline_text(image, text, font, scale, color, thickness, start_x, start_y, line_spacing=70):
    words, lines, current_line = text.split(), [], ""
    
    for word in words:
        test_line = f"{current_line} {word}" if current_line else word
        if cv2.getTextSize(test_line, font, scale, thickness)[0][0] < image.shape[1] - 100:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word
    
    lines.append(current_line)
    for i, line in enumerate(lines):
        y = start_y + i * line_spacing
        x = (image.shape[1] - cv2.getTextSize(line, font, scale, thickness)[0][0]) // 2
        cv2.putText(image, line, (x, y), font, scale, color, thickness, cv2.LINE_AA)

def add_effects(frame, frame_idx, wave_amplitude, wave_frequency, 
                line_spacing, line_thickness, line_opacity, 
                text_top_input, text_bottom_input, 
                scene_changes, total_frames, transition_duration=3):
    height, width, _ = frame.shape
    transformed_frame = frame.copy()
    
    is_transition_frame = any(abs(frame_idx - sc) < transition_duration for sc in scene_changes)
    fade_in_duration, fade_out_start = int(total_frames * 0.06), int(total_frames * 0.94)
    
    if frame_idx < fade_in_duration:
        fade_factor = frame_idx / fade_in_duration
    elif frame_idx > fade_out_start:
        fade_factor = 1 - (frame_idx - fade_out_start) / fade_in_duration
    else:
        fade_factor = None
    
    if fade_factor is not None:
        transformed_frame = cv2.addWeighted(frame, fade_factor, np.zeros_like(frame), 1 - fade_factor, 0)
    
    if is_transition_frame:
        progress = (frame_idx % transition_duration) / transition_duration
        zoom_factor = 1 + 0.02 * progress  # Zoom nh·∫π d·∫ßn
        slide_offset = int(width * progress * 0.5)  # D·ªãch chuy·ªÉn m∆∞·ª£t h∆°n
        
        M = cv2.getRotationMatrix2D((width // 2, height // 2), 0, zoom_factor)
        transformed_frame = cv2.warpAffine(transformed_frame, M, (width, height), borderMode=cv2.BORDER_REPLICATE)
        transformed_frame[:, max(0, slide_offset):] = transformed_frame[:, :width - max(0, slide_offset)]
    
    # 2. Ch·ªânh ƒë·ªô s√°ng v√† ƒë·ªô t∆∞∆°ng ph·∫£n (c·ªë ƒë·ªãnh)
    alpha, beta = 1.06, 20
    transformed_frame = cv2.convertScaleAbs(transformed_frame, alpha=alpha, beta=beta)
    
    # 3. Bi·∫øn ƒë·ªïi m√†u s·∫Øc
    hsv = cv2.cvtColor(transformed_frame, cv2.COLOR_BGR2HSV)
    hsv[..., 1] = np.clip(hsv[..., 1] * 1.10, 0, 255)  # B√£o h√≤a nh·∫π h∆°n
    transformed_frame = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
    
    # 4. Hi·ªáu ·ª©ng g·ª£n s√≥ng (gi·∫£m bi√™n ƒë·ªô)
    for i in range(height):
        offset = int(wave_amplitude * 0.5 * np.sin(2 * np.pi * wave_frequency * (i + frame_idx) / height))
        transformed_frame[i] = np.roll(transformed_frame[i], offset, axis=0)
    
    # 5. ƒê∆∞·ªùng l∆∞·ªõi m√°y ·∫£nh
    overlay = transformed_frame.copy()
    grid_color = (255, 191, 0)
    
    for i in range(1, 5):
        cv2.line(overlay, (0, i * height // 5), (width, i * height // 5), grid_color, line_thickness)
    for i in range(1, 3):
        cv2.line(overlay, (i * width // 3, 0), (i * width // 3, height), grid_color, line_thickness)
    cv2.addWeighted(overlay, line_opacity, transformed_frame, 1 - line_opacity, 0, transformed_frame)
    
    # 6. Vi·ªÅn m·ªÅm m·∫°i h∆°n
    border_thickness = max(1, int(min(width, height) * 0.005))
    cv2.rectangle(transformed_frame, (border_thickness, border_thickness), 
                  (width - border_thickness, height - border_thickness), 
                  grid_color, border_thickness)
    
    return transformed_frame




def detect_scene_changes_and_total_frames(video_path, threshold=30):
    cap = cv2.VideoCapture(video_path)
    prev_frame = None
    scene_changes = []
    frame_idx = 0
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))  # L·∫•y t·ªïng s·ªë khung h√¨nh
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Chuy·ªÉn sang ·∫£nh x√°m
        
        if prev_frame is not None:
            diff = cv2.absdiff(gray, prev_frame)  # T√≠nh ƒë·ªô ch√™nh l·ªách gi·ªØa 2 frame
            mean_diff = np.mean(diff)  # T√≠nh trung b√¨nh ƒë·ªô ch√™nh l·ªách
            if mean_diff > threshold:  # N·∫øu ch√™nh l·ªách l·ªõn h∆°n ng∆∞·ª°ng th√¨ ƒë√°nh d·∫•u
                scene_changes.append(frame_idx)
        prev_frame = gray
        frame_idx += 1
    cap.release()
    return scene_changes, total_frames


def get_total_frames(video_path):
    cap = cv2.VideoCapture(video_path)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    cap.release()
    return total_frames

def get_text_top_or_bot(text_str=""):
    text_top = ""
    font_position = "0.1"
    font_scale = "1.6"
    text_list = text_str.split(',')
    try:
        if len(text_list) == 3:
            text_top, font_position, font_scale = text_list
        elif len(text_list) == 2:
            text_top, font_position = text_list
        else:
            text_top = text_list[0]
    except:
        pass
    return text_top.strip(), float(font_position.strip()), float(font_scale.strip())





def apply_wave_effect(frame, frame_count, amplitude, frequency):
    """ T·∫°o hi·ªáu ·ª©ng g·ª£n s√≥ng ƒë·ªông t√πy ch·ªânh """
    height, width, _ = frame.shape
    wave_frame = np.zeros_like(frame)

    for i in range(height):
        shift_x = int(amplitude * np.sin(2 * np.pi * (i / 100) + frame_count * frequency))  
        # ƒêi·ªÅu ch·ªânh bi√™n ƒë·ªô v√† t·∫ßn s·ªë
        wave_frame[i] = np.roll(frame[i], shift_x, axis=0)

    return wave_frame

def merge_audio(video_path, original_video):
    """ Gh√©p √¢m thanh t·ª´ video g·ªëc v√†o video ƒë√£ ch·ªânh s·ª≠a """
    output_folder = os.path.join(os.path.dirname(video_path), 'end_videos')
    os.makedirs(output_folder, exist_ok=True)
    file_name = os.path.basename(original_video)
    output_video = os.path.join(output_folder, file_name)
    command = [
        "ffmpeg", "-y",
        "-i", video_path,    # Video ƒë√£ ch·ªânh s·ª≠a
        "-i", original_video, # Video g·ªëc (ch·ª©a √¢m thanh)
        "-c:v", "copy",
        "-c:a", "aac",
        "-strict", "experimental",
        "-map", "0:v:0",  # L·∫•y video t·ª´ file ƒë√£ ch·ªânh s·ª≠a
        "-map", "1:a:0",  # L·∫•y √¢m thanh t·ª´ file g·ªëc
        output_video
    ]
    run_command_ffmpeg(command, False)



#-----------------commond-------------------------------


def load_config():
    if os.path.exists(config_path):
        config = get_json_data(config_path)
    else:
        config = {
            "download_folder":"",
            "auto_start": False,
            "is_delete_video": False,
            "show_browser": True,
            "auto_upload_youtube": False,
            "auto_upload_facebook": False,
            "auto_upload_tiktok": False,
            "is_auto_and_schedule": True,
            "max_threads": "1",
            "time_check_auto_upload": "0",
            "time_check_status_video": "0",
            "current_tiktok_account": "",
            "current_channel": "",
            "current_page": "",
            "download_by_video_url": "",

            "file_name": "",
            "start_index": "1",
            "videos_edit_folder": "",
            "first_cut": "0",
            "end_cut": "0",
            "is_delete_original_audio": False,
            "background_music_path": "",
            "background_music_volume": "",
            "speed_up": "1.05",
            "max_zoom_size": "1.1",
            "is_random_zoom": False,
            "vertical_position": 'center',
            "horizontal_position": 'center',
            "flip_video": False,
            "water_path": "",
            "watermark_scale": "1,1",
            "vertical_watermark_position": "50",
            "horizontal_watermark_position": "50",
            "top_bot_overlay": "0,0,black,1",
            "left_right_overlay": "0,0,black,1",
            "top_text": "",
            "bot_text": "",
            "edit_level_2": True,

            "audios_edit_folder": "",
            "audio_speed": "1", 
            "pitch_factor": "1",
            "cut_silence": False,
            "aecho": "100",

            "audio_edit_path": "", 
            "speed_talk": "1", 
            "convert_multiple_record": False, 
            "video_get_audio_path": "", 
            "video_get_audio_url": "", 

            "insteract_now": False, 
            "video_number_interact": "6-20", 
            "watch_time": "10-40", 
            "watch_percent": "60", 
            "like_percent": "40", 
            "comment_percent": "20", 
            "follow_percent": "30", 
            "comments_texts": "", 

            "supported_languages": {
                "en-us": "English (United States)",
                "vi": "Vietnamese"
            }
        }
    save_to_json_file(config, config_path)
    return config

youtube_category = {
    "Film & Animation": "1",
    "Autos & Vehicles": "2",
    "Music": "10",
    "Pets & Animals": "15",
    "Sports": "17",
    "Short Movies": "18",
    "Travel & Events": "19",
    "Gaming": "20",
    "Videoblogging": "21",
    "People & Blogs": "22",
    "Comedy": "23",
    "Entertainment": "24",
    "News & Politics": "25",
    "Howto & Style": "26",
    "Education": "27",
    "Science & Technology": "28",
    "Nonprofits & Activism": "29",
    "Movies": "30",
    "Anime/Animation": "31",
    "Action/Adventure": "32",
    "Classics": "33",
    "Documentary": "35",
    "Drama": "36",
    "Family": "37",
    "Foreign": "38",
    "Horror": "39",
    "Sci-Fi/Fantasy": "40",
    "Thriller": "41",
    "Shorts": "42",
    "Shows": "43",
    "Trailers": "44"
}

youtube_config_commond = {
   "registered_account": [],
   "registered_account_dic": {},
   "current_channel": "",
   "download_folder": "",
   "download_url": "",
   "filter_by_like": "0",
   "filter_by_views": "0",
   "quantity_download": "2000",
   "use_cookies": True,
   "show_browser": True
   }

tiktok_config_commond = {
   "registered_account": [],
   "output_folder": "",
   "show_browser": True,
   "download_url": "",
   "download_folder": "",
   "is_delete_after_upload": False,
   "filter_by_like": "0",
   "filter_by_views": "0",
   "quantity_download": "2000"
}

facebook_config_commond = {
   "registered_account": [],
   "show_browser": True,
   "use_profile_facebook": False,
   "download_url": "",
   "download_folder": "",
   "filter_by_views": "0",
   "filter_by_like": "0",
   "quantity_download": "2000"
}






def load_tiktok_config(acc=None):
    try:
        if acc:
            acc_config_path = os.path.join(tiktok_config_folder, f'{acc}.pkl')
            config = get_json_data(acc_config_path) or {}
            if not config:
                config = {
                    "email":"",
                    "password":"",
                    "proxy":"",
                    "driver_type":"web",
                    "thumbnail_folder":"",
                    "upload_folder":"",
                    "description":"",
                    "hashtags":"#trendding,#fyp,#news",
                    "location":"",
                    "publish_times":"19:00",
                    "cnt_upload_in_day":0,
                    "title":"",
                    "is_title_plus_video_name":False,
                    "upload_date":datetime.now().strftime('%Y-%m-%d'),
                    "is_delete_after_upload":False,
                    "waiting_verify":"30",
                    "number_of_days":"1",
                    "day_gap":"1",
                    "first_login":True,
                    "video_number_interact_befor_upload":"kh√¥ng t∆∞∆°ng t√°c",
                    "auto_interact":True,
                    "use_profile_type":"Kh√¥ng d√πng",
    
                    "chrome_cookies":[],
                    "firefox_cookies":[],
                    "mobi_cookies":[]
                }
                save_tiktok_config(acc, config)
        else:
            if os.path.exists(tiktok_config_commond_path):
                config = get_json_data(tiktok_config_commond_path) or {}
            else:
                config = tiktok_config_commond
                save_to_json_file(config, tiktok_config_commond_path)
        return config
    except:
        getlog()

def save_tiktok_config(acc=None, data=None):
    if not data:
        return
    if acc:
        acc_config_path = os.path.join(tiktok_config_folder, f'{acc}.pkl')
        save_to_json_file(data, acc_config_path)
    else:
        save_to_json_file(data, tiktok_config_commond_path)


def load_youtube_config(acc=None):
    try:
        if acc:
            acc_config_path = os.path.join(youtube_config_folder, f'{acc}.pkl')
            config = get_json_data(acc_config_path) or {}
            if not config:
                config = {
                    "email":"",
                    "title":"",
                    "is_title_plus_video_name":True,
                    "description":"",
                    "curent_playlist":"",
                    "playlist":"",
                    "altered_content":False,
                    "upload_date":datetime.now().strftime('%Y-%m-%d'),
                    "publish_times":"19:00",
                    "cnt_upload_in_day":0,
                    "thumbnail_folder":"",
                    "upload_folder":"",
                    "is_delete_after_upload":False,
                    "number_of_days":"1",
                    "day_gap":"1",
    
                    "chrome_cookies":[],
                    "firefox_cookies":[],
                    "mobi_cookies":[]
                }
                save_tiktok_config(acc, config)
        else:
            if os.path.exists(youtube_config_commond_path):
                config = get_json_data(youtube_config_commond_path) or {}
            else:
                config = youtube_config_commond
                save_to_json_file(config, youtube_config_commond_path)
        return config
    except:
        getlog()

def save_youtube_config(acc=None, data=None):
    if not data:
        return
    if acc:
        acc_config_path = os.path.join(youtube_config_folder, f'{acc}.pkl')
        save_to_json_file(data, acc_config_path)
    else:
        save_to_json_file(data, youtube_config_commond_path)

def load_facebook_config(acc=None):
    try:
        if acc:
            acc_config_path = os.path.join(facebook_config_folder, f'{acc}.pkl')
            config = get_json_data(acc_config_path) or {}
            if not config:
                config = {
                    "email":"",
                    "password":"",
                    "upload_folder":"",
                    "description":"",
                    "publish_times":"19:00",
                    "cnt_upload_in_day":0,
                    "title":"",
                    "is_title_plus_video_name":False,
                    "upload_date":datetime.now().strftime('%Y-%m-%d'),
                    "is_delete_after_upload":False,
                    "number_of_days":"1",
                    "day_gap":"1",
                    "is_reel_video":True,
                    "waiting_verify":"30",

                    "chrome_cookies":[],
                    "firefox_cookies":[],
                    "mobi_cookies":[],
                    "local_storage":{}
                }
                save_tiktok_config(acc, config)
        else:
            if os.path.exists(facebook_config_commond_path):
                config = get_json_data(facebook_config_commond_path) or {}
            else:
                config = facebook_config_commond
                save_to_json_file(config, facebook_config_commond_path)
        return config
    except:
        getlog()

def save_facebook_config(acc=None,data=None):
    if not data:
        return
    if acc:
        acc_config_path = os.path.join(facebook_config_folder, f'{acc}.pkl')
        save_to_json_file(data, acc_config_path)
    else:
        save_to_json_file(data, facebook_config_commond_path)















special_word = {
    "/": " ",
    ";": ". ",
    "-": " ",
    ":": " ",
    " ?": ".",
    " !": ".",
    "?.": ".",
    "!.": ".",
    "..": ".",
    "\"": "",
    "'": "",
    "#": " ",
    "   ": " ",
    "  ": " ",
    "~": " ƒë·∫øn ",
    "$": " ƒë√¥",
    "vnƒë": "ƒë·ªìng",
    "%": " ph·∫ßn trƒÉm",
    "&": " v√† ",
    "=": "b·∫±ng",
    ">": "l·ªõn h∆°n",
    "<": "b√© h∆°n",
}

viet_tat = {
    "AI" : "√¢y ai",
    "API" : "√¢y pi ai",
    "GPT" : "gi pi ti",
}

loi_chinh_ta = {
    "kickboxing": "k√≠t b·ªëc xing",
    "skill": "s·ªù kiu",
    "pro": "p·ªù r·ªì",
    "alo": "a l√¥",
    "out": "au",
    "solo": "s√¥ l√¥",
    "damge": "ƒëƒÉm",
    "studio": "s·ªù tiu ƒëi √¥",
    "ferari": "phe ra ri",
    "over": "ao v·ªù",
    "thinking": "thing king",
    "tr√πm h·ª£p": "tr√πng h·ª£p",
    "ho√†ng th√†nh": "ho√†n th√†nh",
    "ƒë√πa d∆∞·ª°n": "ƒë√πa gi·ª°n",
    "x√°c h·∫°i": "s√°t h·∫°i",
    "x√°c th·ªß": "s√°t th·ªß",
    "xinh con": "sinh con",
    "danh con": "ranh con",
    "tr·∫ª danh": "tr·∫ª ranh",
    "nh√≥c danh": "nh√≥c ranh",
    "sinh ƒë·∫πp": "xinh ƒë·∫πp",
    "n·ªØ t·ª´": "n·ªØ t·ª≠",
    "s·∫Øc kh√≠": "s√°t kh√≠",
    "sui x·∫ªo": "xui x·∫ªo",
    "ch·∫≠m d√£i": "ch·∫≠m r√£i",
    "b·ªìn tr·ªìn": "b·ªìn ch·ªìn",
    "lan l√≥c": "lƒÉn l√≥c",
    "cu·ªët": "c√∫t",
    "c∆∞·ªùi ch·ª≠": "c∆∞·ªùi tr·ª´",
    "l·∫ßm b·∫©m": "l·∫©m b·∫©m",
    "tr√≥ng v√°ng": "cho√°ng v√°ng",
    "s√°t ch·∫øt": "x√°c ch·∫øt",
    "gi√≤ x√©t": "d√≤ x√©t",
    "√¢m d∆∞ng": "√¢m d∆∞∆°ng",
    "cao m√†y": "cau m√†y",
    "ch·∫•n an": "tr·∫•n an",
    "s·ª´ng s·ªët": "s·ª≠ng s·ªët",
    "r·ªó r√†nh": "d·ªó d√†nh",
    "huy·ªÅn ƒë·ªá": "huynh ƒë·ªá",
    "s·ªØa s·ªù": "s·ªØng s·ªù",
    "x·ª©ng s·ªù": "s·ªØng s·ªù",
    "run d·∫©y": "run r·∫©y",
    "tr√†o h·ªèi": "ch√†o h·ªèi",
    "huy√™n ƒë·ªá": "huynh ƒë·ªá",
    "s·ª©ng s·ªù": "s·ªØng s·ªù",
    "lia li·ªán": "lia l·ªãa",
    "r√°c r∆∞·ªùi": "r√°c r∆∞·ªüi",
    "thi·∫øu ra": "thi·∫øu gia",
    "m·ªß kh∆°i": "m√π kh∆°i",
    "sa t√≠t": "xa t√≠t",
    "vi·ªÅn v√¥ng": "vi·ªÖn v√¥ng",
    "tr√¢n √°i": "ch√¢n √°i",
    "cho ƒë√πa": "tr√≤ ƒë√πa",
    "r·ªìn d·∫≠p": "d·ªìn d·∫≠p",
    "s·ªØ ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "x·ªØ ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "ch·ª´ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "·∫©m √Ω": "·∫ßm ·ª∑",
    "d·ªó r·∫£nh": "d·ªó d√†nh",
    "ch·∫ø di·ªÖu": "ch·∫ø gi·ªÖu",
    "b√†m l·∫•y": "b√°m l·∫•y",
    "r≈© r·ªó": "d·ª• gi·ªó",
    "x·ªâ nh·ª•c": "s·ªâ nh·ª•c",
    "song l√™n": "x√¥ng l√™n",
    "ƒëu·ªïi √Ω": "ƒë·ªïi √Ω",
    "y t·ª©": "√Ω t·ª©",
    "to m√≤": "t√≤ m√≤",
    "kh√°ch gi√°o": "kh√°ch s√°o",
    "bƒÉng cua": "b√¢ng qu∆°",
    "chi k·ª∑": "tri k·ª∑",
    "c∆∞·ªùi kh·ªâ": "c∆∞·ªùi kh·∫©y",
    "nguy·ªÅn d√πa": "nguy·ªÅn r·ªßa",
    "ch·∫ø ri·ªÖu": "ch·∫ø gi·ªÖu",
    "mi·ªÉm mai": "m·ªâa mai",
    "binh v·ª±c": "b√™nh v·ª±c",
    "x√°o d·ªóng": "x√°o r·ªóng",
    "√¢m ·ª©c": "·∫•m ·ª©c",
    "x√≥t ra": "x√≥t xa",
    "v√∫t ve": "vu·ªët ve",
    "kh·∫Øc n√†o": "kh√°c n√†o",
    "ly x√¨": "l√¨ x√¨",
    "li x√¨": "l√¨ x√¨",
    "s·ªët s√°ng": "s·ªët s·∫Øng",
    "c·∫ßm mu·ªën": "c√¢m m·ªìm",
    "ma c·∫£ d√≤ng": "ma c√† r·ªìng",
    "h·ªçc t·ª≥": "h·ªçc t·ª∑",
    "quy·ªát": "qu·ªµt",
    "ch·ª´ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "s·∫Øp m·∫∑t": "s·∫Øc m·∫∑t",
    "l∆∞·ªõc x√©o": "li·∫øc x√©o",
    "r·ª•i m·∫Øt": "d·ª•i m·∫Øt",
    "ch√∫ ƒë√°o": "chu ƒë√°o",
    "th√¢n th·ª©c": "th·∫ßn th·ª©c",
    "t·ª± ch·ªçc": "t·ª± tr·ªçng",
    "l√™n l√∫t": "l√©n l√∫t",
    "nh·∫π nh√≥m": "nh·∫π nh√µm",
    "ƒë·ª•ng ch√∫ng": "ƒë·ª•ng tr√∫ng",
    "c√¢u m√†y": "cau m√†y",
    "th√†n th·ªü.": "than th·ªü.",
    "ƒë·ª©ng ph√°t d·∫≠y": "ƒë·ª©ng ph·∫Øt d·∫≠y",
    "n√≥ng gian": "n√≥ng ran",
    "may d√°m": "m√†y d√°m",
    "√°i tr·∫£": "√°i ch√†",
    "nghe th·∫ßy": "nghe th·∫•y",
    "d√†i nh√¢n": "giai nh√¢n",
    "ng∆∞·ª£c l√©p": "ng·ª±c l√©p",
    "trai d·ª±": "chai r∆∞·ª£u",
    "n·ª≠a h·ªç": "n·ª£ h·ªç",
    "c·ª±a ƒë·∫ßu": "g·∫≠t ƒë·∫ßu",
    "gi·ªù kh√≥c gi·ªù c∆∞·ªùi": "gi·ªü kh√≥c gi·ªü c∆∞·ªùi",
    "gi√≥ s∆∞": "gi√°o s∆∞",
    "thi·ªán tr√≠": "thi·ªán ch√≠",
    "can tin": "cƒÉn tin",
    "can t√≠n": "cƒÉn tin",
    "h·ªçc ƒë·ªÉ": "h·ªçc ƒë·ªá",
    "nh·ª±c": "nh∆∞·ª£c",
    "ch√∫t gi·∫≠n": "tr√∫t gi·∫≠n",
    "th·∫≥ng nhi√™n": "th·∫£n nhi√™n",
    "ch√¢m m·∫Øt": "tr∆° m·∫Øt",
    "bu·ªìn m√£": "bu·ªìn b√£",
    "senh": "xen",
    "ng·∫πn": "ngh·∫πn",
    "l·ª©c anh": "li·∫øc anh",
    "nghi·∫øn r·∫±ng": "nghi·∫øn rƒÉng",
    "d·ªó r·∫£nh": "d·ªó d√†nh",
    "t·ªça nguy·ªán": "to·∫°i nguy·ªán",
    "sang ng√£": "sa ng√£",
    "m·∫Øng nh·∫•t": "m·∫Øng nhi·∫øc",
    "ti√™n ƒë·ªìn": "tin ƒë·ªìn",
    "t·ª•t r·ªëc": "t·ª•t d·ªëc",
    "ng·ª´ng m·∫∑t": "ng·∫©ng m·∫∑t",
    "qu√™n bi·∫øt": "quen bi·∫øt",
    "c√¢n b·∫£n": "cƒÉn b·∫£n",
    "nh·ªõ m√†y": "nh√≠u m√†y",
    "·∫•m ·∫©m": "ng·∫•m ng·∫ßm",
    "ng·ªëc ng√°ch": "ng·ªëc ngh·∫øch",
    "l√© l√™n": "l√≥e l√™n",
    "t√≥t": "to√°t",
    "c∆∞∆°ng chi·ªÅu": "c∆∞ng chi·ªÅu",
    "ng·∫ßn ra": "ng·∫©n ra",
    "cao gi√°o": "cao r√°o",
    "ra t·ªôc": "gia t·ªôc",
    "d·ªü tr√≤": "gi·ªü tr√≤",
    "y√™u t√∫": "∆∞u t√∫",
    "ra th·∫ø": "gia th·∫ø",
    "th√¨ gia th·∫ø": "th√¨ ra th·∫ø",
    "th√†nh gia th·∫ø": "th√†nh ra th·∫ø",
    "h·ªìn h·ªÅn": "h·ªïn h·ªÉn",
    "t√°i nh·∫≠t": "t√°i nh·ª£t",
    "s√≥t ra": "x√≥t xa",
    "gi√°ng v·∫ª": "d√°ng v·∫ª",
    "thanh ch·ªët": "then ch·ªët",
    "k·∫øp tr∆∞·ªõc": "ki·∫øp tr∆∞·ªõc",
    "th·∫≠t th·ª©": "tha th·ª©",
    "g√¢y t·∫©m": "gh√™ t·ªüm",
    "ch·ªçng sinh": "tr·ªçng sinh",
    "√°i n√°i": "√°y n√°y",
    "√°i n√°y": "√°y n√°y",
    "s∆∞ng m√π": "s∆∞∆°ng m√π",
    "c∆∞·ªùi l·ªánh": "c∆∞·ªùi l·∫°nh",
    "ƒë√≥i l√†": "ƒë√≥i l√£",
    "li√™n g·ªçi": "li·ªÅn g·ªçi",
    "m√¥ thu·∫´n": "m√¢u thu·∫´n",
    "c∆∞·ªùi kh·ªèi": "c∆∞·ªùi kh·∫©y",
    "k√Ω t√∫c gi√°": "k√Ω t√∫c x√°",
    "k√Ω t√∫c xa": "k√Ω t√∫c x√°",
    "v√≥ng v·∫ª": "v·∫Øng v·∫ª",
    "ƒë√°y ng·ªô": "ƒë√£i ng·ªô",
    "h·ª≠ l·ªánh": "h·ª´ l·∫°nh",
    "ba l·ªì": "ba l√¥",
    "d·∫´n d·ªói": "gi·∫≠n d·ªói",
    "b·ªã ·ªën": "b·ªã ·ªëm",
    "∆∞u √°m": "u √°m",
    "ch·∫ßm t√≠nh": "tr·∫ßm t√≠nh",
    "·ªët ·ª©c": "u·∫•t ·ª©c",
    "h·ªçc t√¨": "h·ªçc t·ª∑",
    "h·ª´a l·∫°nh": "h·ª´ l·∫°nh",
    "nguy ngoai": "ngu√¥i ngoai",
    "ph·∫ßn n·ª≠a": "ph√¢n n·ª≠a",
    "chi·ªÅu tr·ª•ng": "chi·ªÅu chu·ªông",
    "ch√†n da": "tr√†n ra",
    "rƒÉng l√™n": "d√¢ng l√™n",
    "r·ªùi l·∫°i": "gi·ªù l·∫°i",
    "h√°n ta": "h·∫Øn ta",
    "h√†n ta": "h·∫Øn ta",
    "h·ªßng h·ªì": "hu·ªëng h·ªì",
    "rung n·∫°p": "dung n·∫°p",
    "sua tay": "xua tay",
    "ch·∫ßm m·∫∑t": "tr·∫ßm m·∫∑t",
    "ch√¢n nh√†": "tr·∫ßn nh√†",
    "m√¥ gi·∫•c": "m·ªôt gi·∫•c",
    "h·ªôi tr·∫ßn": "h·ªôi chu·∫©n",
    "tr√™n ng√†nh": "chuy√™n ng√†nh",
    "h·ªçc m·ª•y": "h·ªçc mu·ªôi",
    "sen v√†o": "xen v√†o",
    "d√πng b·ªè": "ru·ªìng b·ªè",
    "gi√°ng v·∫ª": "d√°ng v·∫ª",
    "vu kh·ªïng": "vu kh·ªëng",
    "huy ch∆∞ng": "huy ch∆∞∆°ng",
    "d·∫°y r·ªó": "d·∫°y gi·ªó",
    "ch·∫ßm ng√¢m": "tr·∫ßm ng√¢m",
    "h·ª© l·∫°nh": "h·ª´ l·∫°nh",
    "c∆∞·ªõng r·∫Øn": "c·ª©ng r·∫Øn",
    "ch√†ng ph√°o": "tr√†n ph√°o",
    "b√† l√¥": "ba l√¥",
    "c·∫ßn nh·ªõ": "c·∫ßn nh·ªù",
    "t√πn t√¨m": "t·ªßm t·ªâm",
    "b·ªã ƒë·∫∑t": "b·ªãa ƒë·∫∑t",
    "ƒë·ªôc ƒëi·ªán": "ƒë·ªôc ƒë·ªãa",
    "tr√°nh gh√©t": "ch√°n gh√©t",
    "m·∫Øc c·∫•p": "max c·∫•p",
    "cao r·ªçng": "cao gi·ªçng",
    "tin nghƒ©a": "t√¨nh nghƒ©a",
    "lu·ªëng cu·ªën": "lu·ªëng cu·ªëng",
    "m√™ m·ª•i": "m√™ nu·ªôi",
    "c·ªë hi·ªÉu": "c·ªë h·ªØu",
    "th·∫ßm r√πa": "th·∫ßm r·ªßa",
    "b√†nh bao": "b·∫£nh bao",
    "t·ªßn t√¨m": "t·ªßm t·ªâm",
    "x√†i b∆∞·ªõc": "x·∫£i b∆∞·ªõc",
    "c·ª© ng·ª≠i": "c·ª©ng ng∆∞·ªùi",
    "ƒë∆∞·ª£c ƒë·ªëi": "tuy·ªát ƒë·ªëi",
    "ch·∫ßm ch·∫ßm": "ch·∫±m ch·∫±m",
    "ƒë√°y h·ªï": "ƒë√°y h·ªì",
    "b·ªô d·∫°o": "b·ªô d·∫°ng",
    "nghe song": "nghe xong",
    "l·ª•c ra": "l·ª•c gia",
    "ƒÉn ph·∫≠n": "an ph·∫≠n",
    "tr√≠ t√¥n": "ch√≠ t√¥n",
    "chi·∫øc d∆∞∆°ng": "chi·∫øc r∆∞∆°ng",
    "c√°i d∆∞∆°ng": "c√°i r∆∞∆°ng",
    "d·ªça ƒë·∫ßu": "d·∫°o ƒë·∫ßu",
    "chuy·ªÉn c√†nh": "chuy·ªÉn c·∫£nh",
    "ph·∫ßn n·ªô": "ph·∫´n n·ªô",
    "ƒë·∫°p vang": "ƒë·∫°p vƒÉng",
    "h·∫Øn tam": "h·∫Øn ta",
    "g√£√Ω": "g√£y",
    "·ªï ·∫°t": "·ªì ·∫°t",
    "xong l√™n": "x√¥ng l√™n",
    "s·ª£ √Ω": "s∆° √Ω",
    "s·∫Øt l·∫°nh": "s·∫Øc l·∫°nh",
    "s√°ng l·∫°m": "s√°ng l·∫°n",
    "ch√∫ t·ª©c": "chu t∆∞·ªõc",
    "ch∆∞ m·ªô": "chi√™u m·ªô",
    "t·ª≠ th∆∞": "ti·ªÉu th∆∞",
    "gi·ªõi ch·ª©ng": "d∆∞·ªõi tr∆∞·ªõng",
    "v·ª•i v√£": "v·ªôi v√£",
    "c·ªë ƒë·ªông": "c√¥ ƒë·ªçng",
    "song xu√¥i": "xong xu√¥i",
    "song sau": "xong sau",
    "song ƒëi": "xong ƒëi",
    "tr∆∞·ªüng l·ª±c": "ch∆∞·ªüng l·ª±c",
    "tr∆∞·ªüng th·∫≥ng": "ch∆∞·ªüng th·∫≥ng",
    "tr∆∞·ªùng m·∫°nh": "ch∆∞·ªüng m·∫°nh",
    "ch·ª©a th·∫≥ng": "chi·∫øu th·∫≥ng",
    "qu√° nh·∫≠t": "qu√°n nh·∫≠t",
    "tr∆∞·ªùng th·∫≥ng": "ch∆∞·ªüng th·∫≥ng",
    "c√∫c m√°y": "c√∫p m√°y",
    "nghi·∫øn giƒÉng": "nghi·∫øn rƒÉng",
    "tr∆∞ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "l·∫ßm b·∫ßm": "l·∫©m b·∫©m",
    "tri ti√™u": "chi ti√™u",
    "khoe mi·ªáng": "kh√≥e mi·ªáng",
    "b√∫ phim": "b√∫ ph√™m",
    "ch√†n ƒë·∫ßy": "tr√†n ƒë·∫ßy",
    "qua t·∫∑ng": "qu√† t·∫∑ng",
    "ng·∫°o nghƒ©a": "ng·∫°o ngh·ªÖ",
    "th√¢n h√†o": "th·∫ßn h√†o",
    "cao ·ªëm": "c√°o ·ªëm",
    "ch√∫t ƒë∆∞·ª£c": "tr√∫t ƒë∆∞·ª£c",
    "tue tue": "toe to√©t",
    "th·ªã x√°t": "th·ªã s√°t",
    "ƒë·∫•u tr∆∞·ªüng": "ƒë·∫•u tr∆∞·ªùng",
    "l·∫°nh lung": "l·∫°nh l√πng",
    "thi√™n th√≠t": "thin th√≠t",
    "l√°c ƒë·∫ßu": "l·∫Øc ƒë·∫ßu",
    "gi·∫•c l·ªùi": "d·ª©t l·ªùi",
    "s·ª©c kho√°t": "d·ª©t kho√°t",
    "nh√≤ nh√≤": "nho nh·ªè",
    "x·∫£y b∆∞·ªõc": "x·∫£i b∆∞·ªõc",
    "nh√† s·ª≠a": "nh√† x∆∞·ªüng",
    "l√≤ng vƒÉn": "long v√¢n",
    "ra c·ªë": "gia c·ªë",
    "ch·∫≠t nh·ªõ": "ch·ª£t nh·ªõ",
    "x√¥i n·ªïi": "s√¥i n·ªïi",
    "li·ªÅu c·ªè": "l·ªÅu c·ªè",
    "t√¢n qua": "t√¢n quan",
    "r√°ng v·∫ª": "d√°ng v·∫ª",
    "gi·ªØa tr·ª´ng": "gi·ªØa ch·ª´ng",
    "gi√°n ƒë·ªëc": "gi√°m ƒë·ªëc",
    "tr·∫£ h·ªèi": "ch√†o h·ªèi",
    "su n·ªãnh": "xu n·ªãnh",
    "g∆∞·ª£m": "g∆∞·ª£ng",
    "nh·ªõn m√†y": "nh∆∞·ªõng m√†y",
    "d√¢u t√≥c": "r√¢u t√≥c",
    "ng·ªüng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "v·ª•i v√†ng": "v·ªôi v√†ng",
    "ƒë√°ng b·∫±ng": "ƒë√≥ng bƒÉng",
    "r·ª©t l·ªùi": "d·ª©t l·ªùi",
    "ch·∫•t l·∫∑ng": "ch·∫øt l·∫∑ng",
    "th√¢m nghƒ©": "th·∫ßm nghƒ©",
    "xa th·∫£i": "sa th·∫£i",
    "√∫t ·ª©c": "u·∫•t ·ª©c",
    "lan chuy·ªÉn": "lan truy·ªÅn",
    "m·ªùi tr√†o": "m·ªùi ch√†o",
    "lan s√≥ng": "l√†n s√≥ng",
    "tr√¢n th√†nh": "ch√¢n th√†nh",
    "ra nh·∫≠p": "gia nh·∫≠p",
    "t·∫≠p k·ªπ": "t·∫°p k·ªπ",
    "s·∫Ω s·ªë": "d√£y s·ªë",
    "tr·∫≠t nghƒ©": "ch·ª£t nghƒ©",
    "tr·∫ßn tr·ª´": "ch·∫ßn ch·ª´",
    "d·ªØng l·∫°i": "s·ªØng l·∫°i",
    "h√†ng gi√≤ng": "h√†ng rong",
    "ng∆∞∆°ng √°c": "ng∆° ng√°c",
    "ƒë√πi vi·ªác": "ƒëu·ªïi vi·ªác",
    "tr√¢m tr√¢m": "chƒÉm chƒÉm",
    "l√£o ra": "l√£o gia",
    "l√≤ng l·ª±c": "long l·ª±c",
    "th·ªß l√£o": "th·ª• l√£o",
    "truy·ªÅn h√≥a": "chuy·ªÉn h√≥a",
    "nh·∫°t nh·∫°t": "nh√†n nh·∫°t",
    "chu·ªói l·ªßi": "tr·ª•i l·ªßi",
    "bao tr√πng": "bao tr√πm",
    "cƒÉn c·ªói": "c·∫±n c·ªói",
    "ung t√πng": "um t√πm",
    "b·∫•t ch·∫≠t": "b·∫•t ch·ª£t",
    "tr·ª£ t·∫≠p": "tri·ªáu t·∫≠p",
    "cu·ªôc s√°ng": "c·ªôt s√°ng",
    "k·ªπ sƒ©": "k·ªµ sƒ©",
    "m√πi s·∫°c": "m√πi s·∫∑c",
    "s·∫∑c thu·ªëc d√πng": "s·∫∑c thu·ªëc s√∫ng",
    "t√¥n t√©p": "t√¥m t√©p",
    "l·ª£i l·ª•c": "l·ª£i l·ªôc",
    "ch·∫•p tay": "ch·∫Øp tay",
    "v·ª´a r·ª©t": "v·ª´a d·ª©t",
    "l√° tr·∫Øng": "l√° ch·∫Øn",
    "chi√™u t·ª©c": "chi√™u th·ª©c",
    "tr·ªãt ti√™u": "tri·ªát ti√™u",
    "tr·ªôt d·∫°": "ch·ªôt d·∫°",
    "l·ªõn d·ªçng": "l·ªõn gi·ªçng",
    "h√πng h√£n": "hung h√£n",
    "l√≤ng kh√≠": "long kh√≠",
    "gi√†nh d·ªói": "r·∫£nh r·ªói",
    "k·ª≥ sƒ©": "k·ªµ sƒ©",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "l√≤ng th∆∞∆°ng": "long th∆∞∆°ng",
    "c·ªßa ng∆∞·ªùi": "c·ªßa ng∆∞∆°i",
    "tr·ª±c d∆∞∆°ng": "tri·ªáu d∆∞∆°ng",
    "tu t√∫": "t√∫ t√∫",
    "ti·ªÅu c·ª≠u": "ti·ªÉu c·ª≠u",
    "th·∫ø ch·ªßy l√Ω": "thi·∫øt ch·ªßy l√Ω",
    "ti·ªÅu t∆∞ t∆∞": "ti·ªÉu t·ª´ t·ª´",
}

def cleaner_text(text):
    for word, replacement in viet_tat.items():
        text = text.replace(word, replacement)
    text = text.lower()
    for word, replacement in special_word.items():
        text = text.replace(word, replacement)
    for wrong, correct in loi_chinh_ta.items():
        text = text.replace(wrong, correct)
    return text




import re

def number_to_english_with_units(text):
    if not text:
        return
    text = text.lower()
    """ Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ d·∫°ng s·ªë th√†nh ch·ªØ ti·∫øng Anh. """
    
    # S·ªë c∆° b·∫£n t·ª´ 0-99
    words = {
        0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five",
        6: "six", 7: "seven", 8: "eight", 9: "nine", 10: "ten",
        11: "eleven", 12: "twelve", 13: "thirteen", 14: "fourteen",
        15: "fifteen", 16: "sixteen", 17: "seventeen", 18: "eighteen",
        19: "nineteen", 20: "twenty", 30: "thirty", 40: "forty",
        50: "fifty", 60: "sixty", 70: "seventy", 80: "eighty", 90: "ninety"
    }

    units = ["", "thousand", "million", "billion", "trillion"]

    ordinal_words = {
        1: "first", 2: "second", 3: "third", 4: "fourth", 5: "fifth",
        6: "sixth", 7: "seventh", 8: "eighth", 9: "ninth", 10: "tenth",
        11: "eleventh", 12: "twelfth", 13: "thirteenth", 14: "fourteenth",
        15: "fifteenth", 16: "sixteenth", 17: "seventeenth", 18: "eighteenth",
        19: "nineteenth", 20: "twentieth", 30: "thirtieth", 40: "fortieth",
        50: "fiftieth", 60: "sixtieth", 70: "seventieth", 80: "eightieth", 90: "ninetieth"
    }

    unit_mapping = {
        "km": "kilometers", "m": "meters", "cm": "centimeters", "mm": "millimeters",
        "h": "hours", "s": "seconds", "ms": "milliseconds", "%": "percent"
    }

    def read_three_digits(num, ordinal=False):
        """ Chuy·ªÉn s·ªë 3 ch·ªØ s·ªë th√†nh ch·ªØ """
        if num == 0:
            return ""

        hundreds = num // 100
        tens = num % 100
        result = []

        if hundreds:
            result.append(f"{words[hundreds]} hundred")

        if tens:
            if tens in words:
                result.append(ordinal_words[tens] if ordinal else words[tens])
            else:
                tens_digit = tens // 10 * 10
                ones_digit = tens % 10
                if ordinal and ones_digit:
                    result.append(f"{words[tens_digit]}-{ordinal_words[ones_digit]}")
                else:
                    result.append(words[tens_digit])
                    if ones_digit:
                        result.append(words[ones_digit])

        return " ".join(result)

    def number_to_english(number, ordinal=False):
        """ Chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ """
        if number == 0:
            return "zero" if not ordinal else "zeroth"

        if number < 0:
            return "negative " + number_to_english(-number, ordinal)

        parts = []
        idx = 0
        while number > 0:
            num_part = number % 1000
            if num_part:
                part = read_three_digits(num_part, ordinal if number < 1000 else False)
                if idx > 0:
                    part += f" {units[idx]}"
                parts.append(part)
            number //= 1000
            idx += 1

        if ordinal:
            parts[-1] = ordinal_words.get(int(parts[-1]), parts[-1] + "th")

        return " ".join(reversed(parts))

    def convert_fraction(match):
        """ X·ª≠ l√Ω ph√¢n s·ªë nh∆∞ 444/7000 """
        return f"{number_to_english(int(match.group(1)))} over {number_to_english(int(match.group(2)))}"
    
    def convert_decimal(match):
        """ X·ª≠ l√Ω s·ªë th·∫≠p ph√¢n nh∆∞ 55.65 """
        integer_part = int(match.group(1))
        decimal_part = match.group(2)
        decimal_words = " ".join(number_to_english(int(digit)) for digit in decimal_part)
        return f"{number_to_english(integer_part)} point {decimal_words}"
    
    def convert_units(match):
        """ X·ª≠ l√Ω s·ªë c√≥ ƒë∆°n v·ªã nh∆∞ 5649km """
        number = int(match.group(1))
        unit = match.group(2)
        unit_word = unit_mapping.get(unit, unit)
        return f"{number_to_english(number)} {unit_word}"
    
    def convert_ordinal(match):
        """ X·ª≠ l√Ω s·ªë th·ª© t·ª± nh∆∞ 27th """
        return number_to_english(int(match.group(1)), ordinal=True)
    
    def convert_commas(match):
        """ X·ª≠ l√Ω s·ªë c√≥ d·∫•u ph·∫©y nh∆∞ 1,000,000 """
        return number_to_english(int(match.group(0).replace(",", "")))

    def convert_integer(match):
        """ X·ª≠ l√Ω s·ªë nguy√™n ƒë∆°n gi·∫£n """
        return number_to_english(int(match.group(0)))

    # Ch·∫°y t·∫•t c·∫£ b·ªô x·ª≠ l√Ω
    text = re.sub(r"(\d+)/(\d+)", convert_fraction, text)  # Ph√¢n s·ªë
    text = re.sub(r"(\d+)\.(\d+)", convert_decimal, text)   # S·ªë th·∫≠p ph√¢n
    text = re.sub(r"(\d+)(km|m|cm|mm|h|s|ms|%)\b", convert_units, text)  # ƒê∆°n v·ªã
    text = re.sub(r"\b(\d{1,3}(,\d{3})+)\b", convert_commas, text)  # D·∫•u ph·∫©y
    text = re.sub(r"\b(\d+)(st|nd|rd|th)\b", convert_ordinal, text)  # S·ªë th·ª© t·ª±
    text = re.sub(r"\b-?\d+\b", convert_integer, text)  # S·ªë nguy√™n

    return text





# import pandas as pd
# # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a file Parquet
# folder = "D:\\download\\dataset_en"
# parquet_files = get_file_in_folder_by_type(folder, '.parquet')

# # Th∆∞ m·ª•c l∆∞u file audio
# audio_output_folder = os.path.join(folder, "audio_files")
# os.makedirs(audio_output_folder, exist_ok=True)

# # Danh s√°ch l∆∞u d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c file parquet
# all_data = []
# audio_idx = 0  # Ch·ªâ s·ªë ƒë·ªÉ ƒë·∫∑t t√™n file audio

# for parquet_file in parquet_files:
#     parquet_file_path = os.path.join(folder, parquet_file)
#     # ƒê·ªçc file Parquet
#     df = pd.read_parquet(parquet_file_path, engine="pyarrow")

#     # Ki·ªÉm tra d·ªØ li·ªáu
#     print(f"ƒê·ªçc d·ªØ li·ªáu t·ª´: {parquet_file}, S·ªë d√≤ng: {len(df)}")

#     # Ch·ªçn c√°c c·ªôt v√† ƒë·ªïi t√™n
#     df_filtered = df[["file", "spoken_text"]].copy()
#     df_filtered.rename(columns={"file": "audio_file", "spoken_text": "text"}, inplace=True)

#     # Chuy·ªÉn s·ªë th√†nh ch·ªØ trong c·ªôt "text"
#     df_filtered["text"] = df_filtered["text"].apply(number_to_english_with_units)

#     # Danh s√°ch ƒë·ªÉ l∆∞u ƒë∆∞·ªùng d·∫´n file audio sau khi ƒë·ªïi t√™n
#     audio_paths = []

#     for _, row in df.iterrows():
#         file_name = f"{audio_idx}.wav"  # ƒê·∫∑t t√™n file theo idx.wav
#         audio_data = row["audio"]["bytes"]  # L·∫•y d·ªØ li·ªáu nh·ªã ph√¢n c·ªßa audio
        
#         # ƒê∆∞·ªùng d·∫´n file audio sau khi l∆∞u
#         audio_path = os.path.join(audio_output_folder, file_name)

#         # L∆∞u file .wav
#         with open(audio_path, "wb") as f:
#             f.write(audio_data)
        
#         # Th√™m ƒë∆∞·ªùng d·∫´n file audio m·ªõi v√†o danh s√°ch
#         audio_paths.append(file_name)
        
#         # TƒÉng index cho file ti·∫øp theo
#         audio_idx += 1

#     # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file audio m·ªõi v√†o DataFrame
#     df_filtered["audio_file"] = audio_paths

#     # Th√™m c·ªôt speaker_name m·∫∑c ƒë·ªãnh l√† "en_female"
#     df_filtered["speaker_name"] = "en_female"

#     # Th√™m d·ªØ li·ªáu v√†o danh s√°ch t·ªïng
#     all_data.append(df_filtered)

# # G·ªôp t·∫•t c·∫£ d·ªØ li·ªáu v√†o m·ªôt DataFrame duy nh·∫•t
# final_df = pd.concat(all_data, ignore_index=True)

# # L∆∞u to√†n b·ªô d·ªØ li·ªáu v√†o m·ªôt file CSV duy nh·∫•t v·ªõi d·∫•u ph√¢n c√°ch "|"
# csv_file = os.path.join(folder, "output.csv")
# final_df.to_csv(csv_file, sep="|", index=False, encoding="utf-8")

# print(f"‚úÖ ƒê√£ l∆∞u file CSV th√†nh c√¥ng: {csv_file}")
# print(f"‚úÖ ƒê√£ l∆∞u {audio_idx} file √¢m thanh v√†o th∆∞ m·ª•c: {audio_output_folder}")







# get_chrome_driver_with_profile('themysteries.001@gmail.com', True, proxy='154.203.38.33:5821:tonggiang:Zxcv123123', is_remove_proxy=True)